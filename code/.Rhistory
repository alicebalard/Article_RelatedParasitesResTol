mutate(se = sd / sqrt(n),
lower.ci = mean - qt(1 - (0.05 / 2), n - 1) * se,
upper.ci = mean + qt(1 - (0.05 / 2), n - 1) * se)
F2.2 <- ggplot(forplot2, aes(dpi, mean, group = infection_isolate,
col = infection_isolate)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = .2)+
ylab("relative weight compared to day 0 (%)") +
scale_x_continuous(breaks = 0:11, name = "days post infection") +
scale_color_manual(values = c("darkgreen", "lightgreen", "orange"))+
theme(legend.position = c(0.25, 0.2)) +
labs(color = "Eimeria isolate")
Fig2 <- cowplot::plot_grid(F2.1, F2.2,
labels=c("A", "B"), label_size = 20)
pdf(file = "../figures/Fig2_temp.pdf", width = 10, height = 5)
Fig2
dev.off()
## Correlation sum of oocysts / peak oocysts
ggplot(art2SummaryDF, aes(sumoocysts.per.tube, max.oocysts.per.tube)) +
geom_smooth(method = "lm")+ geom_point()
cor(art2SummaryDF$sumoocysts.per.tube , art2SummaryDF$max.oocysts.per.tube,
method = "pearson")
###############################################################
########## Define our indexes and their distribution ##########
###############################################################
## RESISTANCE: inverse of OPG
xRes <- round(as.numeric(na.omit(art2SummaryDF$max.OPG)))
hist(xRes, breaks = 100)
findGoodDist(x = xRes, distribs = c("norm", "nbinom"))
### nbinom for resistance
################################
##### Statistical analyses #####
################################
## LRT test
homemadeGtest <- function(full, base){
dLL = logLik(full) - logLik(base)
dDF = base$df.residual - full$df.residual
pvalue <- 1 - stats::pchisq(2*dLL, df=dDF)
formatC(pvalue, format = "e", digits = 2)
chisqvalue <- stats::qchisq(p = pvalue, df=dDF)
return(paste0("G=",round(2*dLL, 1), " ,df=", dDF, " ,p=", signif(pvalue, digits=2)))
}
## NB. lrtest from pckage lmtest shows similar results ^^
## I'm reinventing the wheel again
## LRT significance for each factor
myLRTsignificanceFactors <- function(modFull, modPar, modMouse, modInt){
# print("significance of parasite:")
return(list(signifParasite = homemadeGtest(modFull, modPar),
signifMouse = homemadeGtest(modFull, modMouse),
signifInter = homemadeGtest(modFull, modInt)))
}
testSignif <- function(dataframe, which){
if(which == "RES"){
modFULL <- glm.nb(max.OPG ~ infection_isolate*Mouse_genotype, data = dataframe)
modPara <- glm.nb(max.OPG ~ Mouse_genotype, data = dataframe)
modMous <- glm.nb(max.OPG ~ infection_isolate, data = dataframe)
modinter <- glm.nb(max.OPG ~ infection_isolate+Mouse_genotype, data = dataframe)
} else if (which == "RES_ZI") { # for zero inflated
modFULL <- zeroinfl(max.OPG ~ infection_isolate*Mouse_genotype, data = dataframe, dist = "negbin")
modPara <- zeroinfl(max.OPG ~ Mouse_genotype, data = dataframe, dist = "negbin")
modMous <- zeroinfl(max.OPG ~ infection_isolate, data = dataframe, dist = "negbin")
modinter <- zeroinfl(max.OPG ~ infection_isolate+Mouse_genotype, data = dataframe, dist = "negbin")
} else if (which == "IMP"){
modFULL <- lm(relWL~infection_isolate*Mouse_genotype, data = dataframe)
modPara <- lm(relWL~Mouse_genotype, data = dataframe)
modMous <- lm(relWL~infection_isolate, data = dataframe)
modinter <- lm(relWL~infection_isolate+Mouse_genotype, data = dataframe)
} else if (which == "TOL"){
modFULL <- lm(relWL ~ 0 + max.OPG : (infection_isolate * Mouse_genotype), data = dataframe)
modPara <- lm(relWL ~ 0 + max.OPG : (Mouse_genotype), data = dataframe)
modMous <- lm(relWL ~ 0 + max.OPG : (infection_isolate), data = dataframe)
modinter <- lm(relWL ~ 0 + max.OPG : (infection_isolate + Mouse_genotype), data = dataframe)
}
return(list(modfull = modFULL,
LRT = myLRTsignificanceFactors(modFULL, modPara, modMous, modinter)))
}
testSignifWithinParas <- function(dataframe, which){
if(which == "RES"){
modFULL <- glm.nb(max.OPG ~ Mouse_genotype, data = dataframe)
mod0 <- glm.nb(max.OPG ~ 1, data = dataframe)
} else if (which == "RES_ZI"){
modFULL <- zeroinfl(max.OPG ~ Mouse_genotype, data = dataframe, dist = "negbin")
mod0 <- zeroinfl(max.OPG ~ 1, data = dataframe, dist = "negbin")
} else if (which == "IMP"){
modFULL <- lm(relWL ~ Mouse_genotype, data = dataframe)
mod0 <- lm(relWL ~ 1, data = dataframe)
} else if (which == "TOL"){
modFULL <- lm(relWL ~ 0 + max.OPG : Mouse_genotype, data = dataframe)
mod0 <- lm(relWL ~ 0 + max.OPG, data = dataframe)
}
G <- homemadeGtest(modFULL, mod0)
return(list(modfull = modFULL, LRT = G))
}
######### STEP 1. Full model to see significance of all variables
######### STEP 2. If parasites significant, model within this infection group
######### STEP 3. If mouse significant, post-hoc test
######### Plot all
# to apply on our 3 DF:
MyListSumma <- list(full = art2SummaryDF, cons1 = art2SummaryDF_conservative1,
cons2 = art2SummaryDF_conservative2)
######### STEP 1. Full model to see significance of all variables
### Res
## zero inflated or not?
#lapply(MyListSumma, function(x){testSignif(x,"RES")})
#lapply(MyListSumma, function(x){testSignif(x,"RES_ZI")})
lapply(MyListSumma, function(x){testSignif(x,"RES")$LRT}) # consistent
# Predicted values:
getPred <- function(x, which){
pred <- ggpredict(testSignif(x, which)$modfull, terms = c("Mouse_genotype", "infection_isolate"))
pred <- (data.frame(pred))
names(pred)[names(pred) %in% c("x", "group")] <- c("Mouse_genotype", "infection_isolate")
return(pred)}
predResList <- lapply(MyListSumma, function(x) getPred(x, "RES"))
test <- predResList$full
test$millionOPG <- round(test$predicted/1000000, 2)
lapply(MyListSumma, function(x){testSignif(x,"RES")$LRT}) # consistent
# Predicted values:
getPred <- function(x, which){
pred <- ggpredict(testSignif(x, which)$modfull, terms = c("Mouse_genotype", "infection_isolate"))
pred <- (data.frame(pred))
names(pred)[names(pred) %in% c("x", "group")] <- c("Mouse_genotype", "infection_isolate")
return(pred)}
predResList <- lapply(MyListSumma, function(x) getPred(x, "RES"))
test <- predResList$full
test$millionOPG <- round(test$predicted/1000000, 2)
test$CI95 <- paste0("[", round(test$conf.low/1000000, 2), "-",round(test$conf.high/1000000, 2), "]")
write.csv(test, "../figures/TableRes.csv", row.names = F)
### Imp
lapply(MyListSumma, function(x){testSignif(x,"IMP")$LRT}) # consistent
# Predicted values:
predImpList <- lapply(MyListSumma, function(x) getPred(x, "IMP"))
### Tol
lapply(MyListSumma, function(x){testSignif(x,"TOL")$LRT}) # consistent
# Predicted values of slopes:
getPredTol <- function(x){
predTolSlopes <- ggpredict(testSignif(x, "TOL")$modfull, terms = c("Mouse_genotype", "infection_isolate"),
condition = c(max.OPG = 1000000))  ## For a million OPG
predTolSlopes <- data.frame(predTolSlopes)
names(predTolSlopes)[names(predTolSlopes) %in% c("x", "group")] <- c("Mouse_genotype", "infection_isolate")
predTolSlopes$group <- paste0(predTolSlopes$Mouse_genotype, predTolSlopes$infection_isolate)
return(predTolSlopes)}
predTolList <- lapply(MyListSumma, getPredTol)
# make a pretty table to read tolerance values
test <- predTolList$full
test$col2 <- paste0(round(test$predicted, 2), " [95%CI: ",round(test$conf.low, 2), "-", round(test$conf.high, 2), "]")
write.csv(test, "../figures/TableTol.csv", row.names = F)
######### STEP 2. Model within each infection group
listPar <- list("Brandenburg139 (E. ferrisi)","Brandenburg64 (E. ferrisi)", "Brandenburg88 (E. falciformis)")
names(listPar) <- c("Brandenburg139", "Brandenburg64", "Brandenburg88")
### Res
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "RES")$LRT})
})  # consistent. 64 different. bad fit for E88, likely because zeros
reswithinpar <- lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "RES")})
})
### Res
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "RES")$LRT})
})  # consistent. 64 different. bad fit for E88, likely because zeros
## E.falciformis (4 individuals with zeros)
ZI88 <- testSignifWithinParas(art2SummaryDF[art2SummaryDF$infection_isolate %in% listPar[3],], "RES_ZI")
# best fit? zero inflated far better
lrtest(reswithinpar$full$Brandenburg88$modfull, ZI88$modfull)
ZI88$LRT #G=16.3 ,df=6 ,p=0.012
reswithinparZI <- lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "RES_ZI")})
})
ZI88 <- testSignifWithinParas(art2SummaryDF[art2SummaryDF$infection_isolate %in% listPar[3],], "RES_ZI")
# best fit? zero inflated far better
lrtest(reswithinpar$full$Brandenburg88$modfull, ZI88$modfull)
ZI88$LRT #G=16.3 ,df=6 ,p=0.012
## conservative
ZI88_cons2 <- testSignifWithinParas(art2SummaryDF_conservative2[
art2SummaryDF_conservative2$infection_isolate %in% listPar[3],], "RES_ZI")
# best fit? zero inflated far better
lrtest(reswithinpar$cons2$Brandenburg88$modfull, ZI88_cons2$modfull)
ZI88_cons2$LRT #G=16.3 ,df=6 ,p=0.012
testSignifWithinParas(art2SummaryDF[art2SummaryDF$infection_isolate %in% listPar[3],], "RES_ZI")
testSignifWithinParas(art2SummaryDF[art2SummaryDF$infection_isolate %in% listPar[3],], "RES_ZI")
ZI88
## conservative
ZI88_cons2 <- testSignifWithinParas(art2SummaryDF_conservative2[
art2SummaryDF_conservative2$infection_isolate %in% listPar[3],], "RES_ZI")
# best fit? zero inflated far better
lrtest(reswithinpar$cons2$Brandenburg88$modfull, ZI88_cons2$modfull)
ZI88_cons2$LRT #G=16.3 ,df=6 ,p=0.012
ZI88_cons2
### Imp
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "IMP")$LRT})
}) # consistent. 64 and 88
### Res
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "RES")$LRT})
})  # consistent. 64 different. bad fit for E88, likely because zeros
### Imp
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "IMP")$LRT})
}) # consistent. 64 and 88
### Tol
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "TOL")$LRT})
}) # consistent: only 88
######### STEP 2. Model within each infection group
listPar <- list("Brandenburg139 (E. ferrisi)","Brandenburg64 (E. ferrisi)", "Brandenburg88 (E. falciformis)")
names(listPar) <- c("Brandenburg139", "Brandenburg64", "Brandenburg88")
### Res
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "RES")$LRT})
})  # consistent. 64 different. bad fit for E88, likely because zeros
### Code for data analysis of Article 2
### August 2019
### Alice Balard
## INFO
# Mouse AA_0088, HI = 0.2
# Mouse AA_0064, HI = 0.08
# Mouse AA_0139, HI = 0.85
#### Load data and functions within ####
source("dataPreparationArticle2.R")
library(cowplot)
library(ggplot2)
library(dplyr)
library(lmtest)
library(pscl)
## Different datasets as follow:
# FULL = DSart2 / art2SummaryDF
nrow(art2SummaryDF)
# conservative 1 = remove mice without oocysts at peak day
# DSart2_conservative1 ; art2SummaryDF_conservative1 # 99 mice
nrow(art2SummaryDF_conservative1)
# conservative 2 = remove mice with contamination or anthelminthic
# DSart2_conservative2 ; art2SummaryDF_conservative2 # 77 mice
nrow(art2SummaryDF_conservative2)
###### Map of our samples FIGURE 1 (with design) ######
hmhzline <- read.csv("../data/HMHZ.csv")
# change not visible color
forMap$color <- as.character(forMap$color)
forMap$color[forMap$color %in% "green"] <- "green4"
forMap$color <- as.factor(forMap$color)
area <- get_stamenmap(bbox = c(8, 48, 18, 54), zoom = 6, maptype = "toner-lite")
map <- ggmap(area) +
geom_path(hmhzline, mapping =  aes(x = lon, y = lat), col = "purple", size = 1) +
geom_label_repel(data = forMap,
aes(longitude, latitude, label = Name, fill = color),
box.padding = 2, size = 7, col = "white", segment.colour = "black") +
geom_point(data = forMap, aes(longitude, latitude, col = color), size = 6) +
scale_color_manual(values = as.character(levels(forMap$color))) +
scale_fill_manual(values = as.character(levels(forMap$color))) +
theme_bw() +
theme(legend.position = 'none', axis.ticks=element_blank())
map
pdf(file = "../figures/Fig1_temp.pdf", width = 8, height = 8)
map
dev.off()
###### what is the overall peak day for each parasite isolate? ######
aggregate(art2SummaryDF$dpi_max.OPG,
list(art2SummaryDF$infection_isolate),
function(x) {paste(length(x), median(x), round(sd(x),2))})
# Brandenburg139 (E. ferrisi) 25 6 0.73
# Brandenburg64 (E. ferrisi) 56 6 1.01
# Brandenburg88 (E. falciformis) 27 8 1.78
aggregate(art2SummaryDF$dpi_minWeight,
list(art2SummaryDF$infection_isolate),
function(x) {paste(length(x), median(x), round(sd(x),2))})
# Brandenburg139 (E. ferrisi) 25 5 2.14
# Brandenburg64 (E. ferrisi) 56 5 1.92
# Brandenburg88 (E. falciformis) 27 9 1.49
## Make table with batches (only batch 1 was treated with anthelminthics)
resume <- data.frame(table(art2SummaryDF$Batch, art2SummaryDF$Mouse_genotype, art2SummaryDF$infection_isolate))
resume <- resume[order(resume$Var1) & resume$Freq != 0,]
test <- data.frame(Batch = resume$Var1)
test$group <- paste(resume$Var2,resume$Var3)
test$freq <- resume$Freq
test <- test[order(test$Batch),]
test <- reshape(test, idvar = "Batch", v.names = "freq", timevar = "group", direction="wide")
write.csv(test,
"../figures/TableAllBatches.csv", row.names = F) # NB done for FULL DS
## Age of mice
range(as.numeric(art2SummaryDF$ageAtInfection))
###### what is the overall prepatent period for each parasite isolate? ######
d <- as.data.frame(
DSart2[!is.na(DSart2$OPG) & DSart2$OPG > 0,] %>%
dplyr::group_by(EH_ID) %>%
dplyr::slice(which.min(dpi)) %>%
dplyr::select(EH_ID, weight, HI, startingWeight, ageAtInfection, Sex,
Mouse_genotype, Eimeria_species, Mouse_subspecies,
infection_isolate, Exp_ID, dpi))
aggregate(d$dpi,
list(d$infection_isolate),
function(x) {paste(length(x), median(x), round(sd(x),2))})
# 1    Brandenburg139 (E. ferrisi)  25 5 0.2
# 2     Brandenburg64 (E. ferrisi) 56 5 1.58
# 3 Brandenburg88 (E. falciformis) 23 7 2.57
###### Course of infection FIGURE 2 ######
forplot <- DSart2 %>%
group_by(infection_isolate, dpi) %>%
summarise(mean = mean(OPG*10e-6, na.rm = TRUE),
sd = sd(OPG*10e-6, na.rm = TRUE),
n = n()) %>%
mutate(se = sd / sqrt(n),
lower.ci = mean - qt(1 - (0.05 / 2), n - 1) * se,
upper.ci = mean + qt(1 - (0.05 / 2), n - 1) * se)
F2.1 <- ggplot(forplot, aes(dpi, mean, group = infection_isolate, col = infection_isolate)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = .2)+
ylab("million oocysts per gram of feces") +
scale_x_continuous(breaks = 0:11, name = "days post infection") +
scale_color_manual(values = c("darkgreen", "lightgreen", "orange"))+
theme(legend.position = c(0.25, 0.8)) +
labs(color = "Eimeria isolate")
forplot2 <-  DSart2 %>%
group_by(infection_isolate, dpi) %>%
summarise(mean = mean(relativeWeight, na.rm = TRUE),
sd = sd(relativeWeight, na.rm = TRUE),
n = n()) %>%
mutate(se = sd / sqrt(n),
lower.ci = mean - qt(1 - (0.05 / 2), n - 1) * se,
upper.ci = mean + qt(1 - (0.05 / 2), n - 1) * se)
F2.2 <- ggplot(forplot2, aes(dpi, mean, group = infection_isolate,
col = infection_isolate)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = .2)+
ylab("relative weight compared to day 0 (%)") +
scale_x_continuous(breaks = 0:11, name = "days post infection") +
scale_color_manual(values = c("darkgreen", "lightgreen", "orange"))+
theme(legend.position = c(0.25, 0.2)) +
labs(color = "Eimeria isolate")
Fig2 <- cowplot::plot_grid(F2.1, F2.2,
labels=c("A", "B"), label_size = 20)
pdf(file = "../figures/Fig2_temp.pdf", width = 10, height = 5)
Fig2
dev.off()
## Correlation sum of oocysts / peak oocysts
ggplot(art2SummaryDF, aes(sumoocysts.per.tube, max.oocysts.per.tube)) +
geom_smooth(method = "lm")+ geom_point()
cor(art2SummaryDF$sumoocysts.per.tube , art2SummaryDF$max.oocysts.per.tube,
method = "pearson")
###############################################################
########## Define our indexes and their distribution ##########
###############################################################
## RESISTANCE: inverse of OPG
xRes <- round(as.numeric(na.omit(art2SummaryDF$max.OPG)))
hist(xRes, breaks = 100)
findGoodDist(x = xRes, distribs = c("norm", "nbinom"))
### nbinom for resistance
################################
##### Statistical analyses #####
################################
## LRT test
homemadeGtest <- function(full, base){
dLL = logLik(full) - logLik(base)
dDF = base$df.residual - full$df.residual
pvalue <- 1 - stats::pchisq(2*dLL, df=dDF)
formatC(pvalue, format = "e", digits = 2)
chisqvalue <- stats::qchisq(p = pvalue, df=dDF)
return(paste0("G=",round(2*dLL, 1), " ,df=", dDF, " ,p=", signif(pvalue, digits=2)))
}
## NB. lrtest from pckage lmtest shows similar results ^^
## I'm reinventing the wheel again
## LRT significance for each factor
myLRTsignificanceFactors <- function(modFull, modPar, modMouse, modInt){
# print("significance of parasite:")
return(list(signifParasite = homemadeGtest(modFull, modPar),
signifMouse = homemadeGtest(modFull, modMouse),
signifInter = homemadeGtest(modFull, modInt)))
}
testSignif <- function(dataframe, which){
if(which == "RES"){
modFULL <- glm.nb(max.OPG ~ infection_isolate*Mouse_genotype, data = dataframe)
modPara <- glm.nb(max.OPG ~ Mouse_genotype, data = dataframe)
modMous <- glm.nb(max.OPG ~ infection_isolate, data = dataframe)
modinter <- glm.nb(max.OPG ~ infection_isolate+Mouse_genotype, data = dataframe)
} else if (which == "RES_ZI") { # for zero inflated
modFULL <- zeroinfl(max.OPG ~ infection_isolate*Mouse_genotype, data = dataframe, dist = "negbin")
modPara <- zeroinfl(max.OPG ~ Mouse_genotype, data = dataframe, dist = "negbin")
modMous <- zeroinfl(max.OPG ~ infection_isolate, data = dataframe, dist = "negbin")
modinter <- zeroinfl(max.OPG ~ infection_isolate+Mouse_genotype, data = dataframe, dist = "negbin")
} else if (which == "IMP"){
modFULL <- lm(relWL~infection_isolate*Mouse_genotype, data = dataframe)
modPara <- lm(relWL~Mouse_genotype, data = dataframe)
modMous <- lm(relWL~infection_isolate, data = dataframe)
modinter <- lm(relWL~infection_isolate+Mouse_genotype, data = dataframe)
} else if (which == "TOL"){
modFULL <- lm(relWL ~ 0 + max.OPG : (infection_isolate * Mouse_genotype), data = dataframe)
modPara <- lm(relWL ~ 0 + max.OPG : (Mouse_genotype), data = dataframe)
modMous <- lm(relWL ~ 0 + max.OPG : (infection_isolate), data = dataframe)
modinter <- lm(relWL ~ 0 + max.OPG : (infection_isolate + Mouse_genotype), data = dataframe)
}
return(list(modfull = modFULL,
LRT = myLRTsignificanceFactors(modFULL, modPara, modMous, modinter)))
}
testSignifWithinParas <- function(dataframe, which){
if(which == "RES"){
modFULL <- glm.nb(max.OPG ~ Mouse_genotype, data = dataframe)
mod0 <- glm.nb(max.OPG ~ 1, data = dataframe)
} else if (which == "RES_ZI"){
modFULL <- zeroinfl(max.OPG ~ Mouse_genotype, data = dataframe, dist = "negbin")
mod0 <- zeroinfl(max.OPG ~ 1, data = dataframe, dist = "negbin")
} else if (which == "IMP"){
modFULL <- lm(relWL ~ Mouse_genotype, data = dataframe)
mod0 <- lm(relWL ~ 1, data = dataframe)
} else if (which == "TOL"){
modFULL <- lm(relWL ~ 0 + max.OPG : Mouse_genotype, data = dataframe)
mod0 <- lm(relWL ~ 0 + max.OPG, data = dataframe)
}
G <- homemadeGtest(modFULL, mod0)
return(list(modfull = modFULL, LRT = G))
}
######### STEP 1. Full model to see significance of all variables
######### STEP 2. If parasites significant, model within this infection group
######### STEP 3. If mouse significant, post-hoc test
######### Plot all
# to apply on our 3 DF:
MyListSumma <- list(full = art2SummaryDF, cons1 = art2SummaryDF_conservative1,
cons2 = art2SummaryDF_conservative2)
######### STEP 1. Full model to see significance of all variables
### Res
## zero inflated or not?
#lapply(MyListSumma, function(x){testSignif(x,"RES")})
#lapply(MyListSumma, function(x){testSignif(x,"RES_ZI")})
lapply(MyListSumma, function(x){testSignif(x,"RES")$LRT}) # consistent
# Predicted values:
getPred <- function(x, which){
pred <- ggpredict(testSignif(x, which)$modfull, terms = c("Mouse_genotype", "infection_isolate"))
pred <- (data.frame(pred))
names(pred)[names(pred) %in% c("x", "group")] <- c("Mouse_genotype", "infection_isolate")
return(pred)}
predResList <- lapply(MyListSumma, function(x) getPred(x, "RES"))
test <- predResList$full
test$millionOPG <- round(test$predicted/1000000, 2)
test$CI95 <- paste0("[", round(test$conf.low/1000000, 2), "-",round(test$conf.high/1000000, 2), "]")
write.csv(test, "../figures/TableRes.csv", row.names = F)
### Imp
lapply(MyListSumma, function(x){testSignif(x,"IMP")$LRT}) # consistent
# Predicted values:
predImpList <- lapply(MyListSumma, function(x) getPred(x, "IMP"))
### Tol
lapply(MyListSumma, function(x){testSignif(x,"TOL")$LRT}) # consistent
# Predicted values of slopes:
getPredTol <- function(x){
predTolSlopes <- ggpredict(testSignif(x, "TOL")$modfull, terms = c("Mouse_genotype", "infection_isolate"),
condition = c(max.OPG = 1000000))  ## For a million OPG
predTolSlopes <- data.frame(predTolSlopes)
names(predTolSlopes)[names(predTolSlopes) %in% c("x", "group")] <- c("Mouse_genotype", "infection_isolate")
predTolSlopes$group <- paste0(predTolSlopes$Mouse_genotype, predTolSlopes$infection_isolate)
return(predTolSlopes)}
predTolList <- lapply(MyListSumma, getPredTol)
# make a pretty table to read tolerance values
test <- predTolList$full
test$col2 <- paste0(round(test$predicted, 2), " [95%CI: ",round(test$conf.low, 2), "-", round(test$conf.high, 2), "]")
write.csv(test, "../figures/TableTol.csv", row.names = F)
######### STEP 2. Model within each infection group
listPar <- list("Brandenburg139 (E. ferrisi)","Brandenburg64 (E. ferrisi)", "Brandenburg88 (E. falciformis)")
names(listPar) <- c("Brandenburg139", "Brandenburg64", "Brandenburg88")
### Res
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "RES")$LRT})
})  # consistent. 64 different. bad fit for E88, likely because zeros
## conservative
ZI88_cons2 <- testSignifWithinParas(art2SummaryDF_conservative2[
art2SummaryDF_conservative2$infection_isolate %in% listPar[3],], "RES_ZI")
# best fit? zero inflated far better
lrtest(reswithinpar$cons2$Brandenburg88$modfull, ZI88_cons2$modfull)
ZI88_cons2$LRT #G=16.3 ,df=6 ,p=0.012
ZI88_cons2 #"G=14.1 ,df=6 ,p=0.028"
### Imp
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "IMP")$LRT})
}) # consistent. 64 and 88
### Tol
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "TOL")$LRT})
}) # consistent: only 88
reswithinpar
### Res
lapply(MyListSumma, function(xlist){
lapply(listPar, function(xpar){
testSignifWithinParas(xlist[xlist$infection_isolate %in% xpar,], "RES")$LRT})
})  # consistent. 64 different. bad fit for E88, likely because zeros
# plot marginal effects of interaction terms by isolates & strains
posx.2 <- c(0.8+c(0,1/8,2/8,3/8),1.8+c(0,1/8,2/8,3/8),2.8+c(0,1/8,2/8,3/8))
get_plotR <- function(dataframe){
plot_model(testSignif(dataframe, "RES")$modfull,
type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "cornflowerblue", "red4", "indianred1"),
name = "Mouse strain",labels = c("SCHUNT", "STRA", "BUSNA", "PWD")) +
scale_y_continuous("(predicted) maximum million oocysts per gram of feces",
breaks = seq(0, 5e6, 0.5e6),
labels = as.character(seq(0, 5e6, 0.5e6)/1e6))+
ggtitle("Maximum parasite load = (inverse of) resistance \n(mean and 95%CI)") +
xlab("Eimeria isolate") +
theme(axis.title.x = element_text(hjust=1), axis.text=element_text(size=13)) +
geom_text(aes(x=posx.2,y=0,label=getNs("max.OPG", dataframe)),vjust=0)
}
plotResList <- lapply(MyListSumma, function(x) get_plotR(x))
plotResList
