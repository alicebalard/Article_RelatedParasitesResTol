summaryDF108mice$intFac <- interaction(summaryDF108mice$infection_isolate,
summaryDF108mice$Mouse_genotype, drop=T)
modResStrainformulticomp <- glm.nb(peak.oocysts.per.g.mouse ~ intFac, data = summaryDF108mice)
postHocRes <- summary(glht(modResStrainformulticomp, linfct=mcp(intFac = "Tukey")))
# Create a matrix to present the post-hoc tests
getFullMatrix <- function(postHoc){
pvalues <- postHoc$test$pvalues
pvalues <- unlist(lapply(pvalues, function(i){if(i < 0.001) {
i <- "< 0.001"
} else if (i < 0.01){
i <- "< 0.01"
} else {i <- round(i, 2)}}))
upperTriangle <- paste0("est:", round(postHoc$test$coefficients, 2), ", Std.Error:",round(postHoc$test$sigma, 2))
lowerTriangle <- paste0("z value:", round(postHoc$test$tstat, 2), ", Pr(>|z|):", pvalues)
getMatrix <- function(postHoc, toFillUpWith){
x <- strsplit(names(postHoc$test$coefficients), " - ")
rownames <- as.character(unlist(lapply(x, `[[`, 1)))
colnames <- as.character(unlist(lapply(x, `[[`, 2)))
myDf_PostHoc <- data.frame(colnames = colnames, rownames = rownames, toFillUpWith = toFillUpWith)
#fill gaps to have 12 rows and 12 columns
myDf_PostHoc <- rbind(data.frame(colnames = myDf_PostHoc$colnames[1],
rownames = myDf_PostHoc$colnames[1], toFillUpWith = "diagonal"),
myDf_PostHoc,
data.frame(colnames = myDf_PostHoc$rownames[length(myDf_PostHoc$rownames)],
rownames = myDf_PostHoc$rownames[length(myDf_PostHoc$rownames)], toFillUpWith = "diagonal"))
# Create matrix
mat <- reshape(myDf_PostHoc, idvar = "colnames", timevar = "rownames", direction = "wide")
rownames(mat) <- mat$colnames
mat <- mat[!names(mat) %in% "colnames"]
colnames(mat) <- gsub("toFillUpWith.", "", colnames(mat))
return(mat)
}
### make matrix 1: estimates and standard errors
mat1 <- getMatrix(postHocRes, upperTriangle)
### make matrix 2: z value and P
mat2 <- getMatrix(postHocRes, lowerTriangle)
mat3 <- t(mat2)
## Combine
mat <- mat1
mat[] <- lapply(mat, as.character)
mat[lower.tri(mat)] <- mat3[lower.tri(mat3)]
mat <- as.matrix(mat)
diag(mat) <- ""
return(mat)
}
myMatpostHocRes <- getFullMatrix(postHocRes)
write.csv(myMatpostHocRes, "../figures/supTablePostHocRes.csv")
## Results:
# Brandenburg88 (E. falciformis).MMm_F0 (Pw-Pw) - Brandenburg64 (E. ferrisi).MMd_F0 (Sc-Sc) == 0       0.0294 *
# Brandenburg88 (E. falciformis).MMm_F0 (Pw-Pw) - Brandenburg88 (E. falciformis).MMd_F0 (Sc-Sc) == 0   0.0368 *
# Brandenburg88 (E. falciformis).MMm_F0 (Pw-Pw) - Brandenburg64 (E. ferrisi).MMd_F0 (St-St) == 0        <0.01 **
# Brandenburg88 (E. falciformis).MMm_F0 (Pw-Pw) - Brandenburg88 (E. falciformis).MMd_F0 (St-St) == 0    <0.01 ***
# Brandenburg88 (E. falciformis).MMm_F0 (Pw-Pw) - Brandenburg139 (E. ferrisi).MMm_F0 (Bu-Bu) == 0      0.0318 *
# Brandenburg88 (E. falciformis).MMm_F0 (Bu-Bu) - Brandenburg64 (E. ferrisi).MMm_F0 (Bu-Bu) == 0       0.0189 *
# Brandenburg88 (E. falciformis).MMm_F0 (Pw-Pw) - Brandenburg64 (E. ferrisi).MMm_F0 (Bu-Bu) == 0        <0.01 ***
# Brandenburg64 (E. ferrisi).MMm_F0 (Pw-Pw) - Brandenburg88 (E. falciformis).MMm_F0 (Bu-Bu) == 0       0.0226 *
# Brandenburg88 (E. falciformis).MMm_F0 (Pw-Pw) - Brandenburg139 (E. ferrisi).MMm_F0 (Pw-Pw) == 0       <0.01 **
# Brandenburg88 (E. falciformis).MMm_F0 (Pw-Pw) - Brandenburg64 (E. ferrisi).MMm_F0 (Pw-Pw) == 0        <0.01 ***
## And plot:
## To add Ns on top of bars
getNs <- function(proxy, df, groupMus = "Mouse_genotype", groupPar = "infection_isolate"){
noNA = df[!is.na(df[[proxy]]),]
noNA$groupMus = noNA[[groupMus]]
noNA$groupPar = noNA[[groupPar]]
tab = table(noNA$groupPar, noNA$groupMus)
Ns = as.character(as.vector(t(tab)[as.vector(t(tab))!=0]))
return(Ns)
}
## Fig 3
# plot marginal effects of interaction terms
posx.1 <- c(0.9,1.1, 1.9,2.1)
## FOR PLOT, use Resistance Index
y = seq(0,1,0.05)
x = -y * 300000 + 300000
plotR_F0_subsp <- plot_model(modResSubsp, type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "red"),
name = "Mouse subspecies",labels = c("Mmd", "Mmm")) +
ggtitle("Resistance") +
scale_y_continuous("(predicted) Resistance Index",
trans = "reverse",
breaks = x,
labels = y) +
xlab("Eimeria species") +
theme(axis.title.x = element_text(hjust=1), axis.text=element_text(size=13)) +
geom_text(aes(x=posx.1,y=90000,label=getNs("peak.oocysts.per.g.mouse", summaryDF108mice,
"Mouse_subspecies", "Eimeria_species")), vjust=0)
plotR_F0_subsp
# plot marginal effects of interaction terms by isolates & strains
posx.2 <- c(0.8+c(0,1/8,2/8,3/8),1.8+c(0,1/8,2/8,3/8),2.8+c(0,1/8,2/8,3/8))
## and plot
plotR_F0_strains <- plot_model(modResStrain, type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "cornflowerblue", "red4", "indianred1"),
name = "Mouse strain",labels = c("SCHUNT", "STRA", "BUSNA", "PWD")) +
ggtitle("Resistance") +
scale_y_continuous("(predicted) Resistance Index",
trans = "reverse",
breaks = x,
labels = y) +
xlab("Eimeria isolate") +
theme(axis.title.x = element_text(hjust=1), axis.text=element_text(size=13)) +
geom_text(aes(x=posx.2,y=120000,label=getNs("peak.oocysts.per.g.mouse", summaryDF108mice)),vjust=0)
plotR_F0_strains
############
## Impact ##
############
summaryDF108mice %>%
group_by(Mouse_subspecies, Eimeria_species) %>%
summarise(meanImp = mean(impact, na.rm = T))
modImpSubsp <- survreg(Surv(impact)~Eimeria_species*Mouse_subspecies, data = summaryDF108mice, dist="weibull")
anova(modImpSubsp) # Eimeria species AND mouse subspecies significant
coef(modImpSubsp)
coefImp <- exp(coef(modImpSubsp))
coefImp[1] - 0.01# Efer-MmD: 6.1%
coefImp[1] * coefImp[2] - 0.01 # Efal-MmD: 9.3%
coefImp[1] * coefImp[3] - 0.01# Efer-Mmm: 8.3%
coefImp[1] * coefImp[2] * coefImp[3] * coefImp[4] -0.01 # Efal-Mmm: 18.7%
## Translation of 1% because Weibull doesn't support nul data
modImpStrain <- survreg(Surv(impact)~infection_isolate*Mouse_genotype, data = summaryDF108mice, dist="weibull")
anova(modImpStrain)
length(summaryDF108mice$relWL)
# Eimeria isolate significant
5.125519e-03
5.125519e-03 < 0.001
5.125519e-03 < 0.01
###############
## Tolerance ##
###############
modTolSubspecies <- lm(ToleranceIndex ~ Eimeria_species*Mouse_subspecies, data = summaryDF108mice)
anova(modTolSubspecies)
coef(modTolStrain)
coef(modTolSubspecies)
0.78171686 + -0.03839559
0.78171686 -0.01132146
0.78171686 -0.01132146 -0.03839559-0.18360732
## Correlation sum of oocysts / peak oocysts
ggplot(summaryDF108mice, aes(sumoocysts.per.tube, max.oocysts.per.tube)) +
geom_smooth(method = "lm")+ geom_point()
library(ggplot2)
## Correlation sum of oocysts / peak oocysts
ggplot(summaryDF108mice, aes(sumoocysts.per.tube, max.oocysts.per.tube)) +
geom_smooth(method = "lm")+ geom_point()
### Code for data analysis of Article 2
### August 2019
### Alice Balard
## INFO
# Mouse AA_0088, HI = 0.2
# Mouse AA_0064, HI = 0.08
# Mouse AA_0139, HI = 0.85
#### Load data and functions within ####
source("dataPreparation.R")
###### Map of our samples FIGURE 1 (with design) ######
hmhzline <- read.csv("../data/HMHZ.csv")
area <- get_stamenmap(bbox = c(9, 49, 17, 53.7), zoom = 7,
maptype = "toner-lite")
map <- ggmap(area) +
geom_path(hmhzline, mapping =  aes(x = lon, y = lat), col = "purple", size = 4) +
geom_label_repel(data = forMap,
aes(longitude, latitude, label = Name),
box.padding = 2, size = 5) +
geom_point(data = forMap, aes(longitude, latitude, col = color), size = 6) +
scale_color_manual(values = as.character(levels(forMap$color))) +
theme_bw() +
theme(legend.position = 'none', axis.ticks=element_blank())
map
pdf(file = "../figures/Fig1.pdf", width = 5, height =5)
map
dev.off()
######################################
########## Read information ##########
######################################
table(summaryDF108mice$infection_isolate, summaryDF108mice$Mouse_genotype, summaryDF108mice$anth)
## Age of mice
range(as.numeric(rawDF108mice$ageAtInfection))
###### what is the overall peak day for each parasite isolate? ######
aggregate(summaryDF108mice$dpi_max.oocysts.per.tube,
list(summaryDF108mice$infection_isolate),
function(x) {paste(length(x), median(x), round(sd(x),2))})
aggregate(summaryDF108mice$dpi_minWeight,
list(summaryDF108mice$infection_isolate),
function(x) {paste(length(x), median(x), round(sd(x),2))})
###### what is the overall prepatent period for each parasite isolate? ######
d <- as.data.frame(
rawDF108mice[!is.na(rawDF108mice$oocysts.per.tube) & rawDF108mice$oocysts.per.tube > 0,] %>%
dplyr::group_by(EH_ID) %>%
dplyr::slice(which.min(dpi)) %>%
dplyr::select(EH_ID, weight, HI, startingWeight, ageAtInfection, Sex,
Mouse_genotype, Eimeria_species, Mouse_subspecies,
infection_isolate, Exp_ID, dpi))
aggregate(d$dpi,
list(d$infection_isolate),
function(x) {paste(length(x), median(x), round(sd(x),2))})
###### Course of infection FIGURE 2 ######
rawDF108mice$parasiteDensity <- rawDF108mice$oocysts.per.tube / rawDF108mice$weight
forplot <- rawDF108mice %>%
group_by(infection_isolate, dpi) %>%
summarise(mean = mean(parasiteDensity*10e-6, na.rm = TRUE),
sd = sd(parasiteDensity*10e-6, na.rm = TRUE),
n = n()) %>%
mutate(se = sd / sqrt(n),
lower.ci = mean - qt(1 - (0.05 / 2), n - 1) * se,
upper.ci = mean + qt(1 - (0.05 / 2), n - 1) * se)
F2.1 <- ggplot(forplot, aes(dpi, mean, group = infection_isolate, col = infection_isolate)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = .2)+
ylab("parasite density (10e6 oocysts per mouse gram)") +
scale_x_continuous(breaks = 0:11, name = "days post infection") +
theme(legend.position = c(0.25, 0.8)) +
labs(color = "Eimeria isolate")
forplot2 <- rawDF108mice %>%
group_by(infection_isolate, dpi) %>%
summarise(mean = mean(relativeWeight, na.rm = TRUE),
sd = sd(relativeWeight, na.rm = TRUE),
n = n()) %>%
mutate(se = sd / sqrt(n),
lower.ci = mean - qt(1 - (0.05 / 2), n - 1) * se,
upper.ci = mean + qt(1 - (0.05 / 2), n - 1) * se)
F2.2 <- ggplot(forplot2, aes(dpi, mean, group = infection_isolate,
col = infection_isolate)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = .2)+
ylab("relative weight compared to day 0 (%)") +
scale_x_continuous(breaks = 0:11, name = "days post infection") +
theme(legend.position = c(0.25, 0.2)) +
labs(color = "Eimeria isolate")
library(cowplot)
Fig2 <- plot_grid(F2.1, F2.2,
labels=c("A", "B"), label_size = 20)
pdf(file = "../figures/Fig2.pdf", width = 10, height = 5)
Fig2
dev.off()
## Correlation sum of oocysts / peak oocysts
ggplot(summaryDF108mice, aes(sumoocysts.per.tube, max.oocysts.per.tube)) +
geom_smooth(method = "lm")+ geom_point()
#### Load data and functions within ####
source("dataPreparation.R")
###### Map of our samples FIGURE 1 (with design) ######
hmhzline <- read.csv("../data/HMHZ.csv")
area <- get_stamenmap(bbox = c(9, 49, 17, 53.7), zoom = 7,
maptype = "toner-lite")
map <- ggmap(area) +
geom_path(hmhzline, mapping =  aes(x = lon, y = lat), col = "purple", size = 4) +
geom_label_repel(data = forMap,
aes(longitude, latitude, label = Name),
box.padding = 2, size = 5) +
geom_point(data = forMap, aes(longitude, latitude, col = color), size = 6) +
scale_color_manual(values = as.character(levels(forMap$color))) +
theme_bw() +
theme(legend.position = 'none', axis.ticks=element_blank())
map
#pdf(file = "../figures/Fig1.pdf", width = 5, height =5)
map
dev.off()
#### Load data and functions within ####
source("dataPreparation.R")
###### Map of our samples FIGURE 1 (with design) ######
hmhzline <- read.csv("../data/HMHZ.csv")
area <- get_stamenmap(bbox = c(9, 49, 17, 53.7), zoom = 7,
maptype = "toner-lite")
#### Load data and functions within ####
source("dataPreparation.R")
#### Load data and functions within ####
source("dataPreparation.R")
install.packages("sjPlot")
#### Load data and functions within ####
source("dataPreparation.R")
#### Load data and functions within ####
source("dataPreparation.R")
###### Map of our samples FIGURE 1 (with design) ######
hmhzline <- read.csv("../data/HMHZ.csv")
area <- get_stamenmap(bbox = c(9, 49, 17, 53.7), zoom = 7,
maptype = "toner-lite")
map <- ggmap(area) +
geom_path(hmhzline, mapping =  aes(x = lon, y = lat), col = "purple", size = 4) +
geom_label_repel(data = forMap,
aes(longitude, latitude, label = Name),
box.padding = 2, size = 5) +
geom_point(data = forMap, aes(longitude, latitude, col = color), size = 6) +
scale_color_manual(values = as.character(levels(forMap$color))) +
theme_bw() +
theme(legend.position = 'none', axis.ticks=element_blank())
map
table(summaryDF108mice$infection_isolate, summaryDF108mice$Mouse_genotype, summaryDF108mice$anth)
## Age of mice
range(as.numeric(rawDF108mice$ageAtInfection))
###### what is the overall peak day for each parasite isolate? ######
aggregate(summaryDF108mice$dpi_max.oocysts.per.tube,
list(summaryDF108mice$infection_isolate),
function(x) {paste(length(x), median(x), round(sd(x),2))})
aggregate(summaryDF108mice$dpi_minWeight,
list(summaryDF108mice$infection_isolate),
function(x) {paste(length(x), median(x), round(sd(x),2))})
###### what is the overall prepatent period for each parasite isolate? ######
d <- as.data.frame(
rawDF108mice[!is.na(rawDF108mice$oocysts.per.tube) & rawDF108mice$oocysts.per.tube > 0,] %>%
dplyr::group_by(EH_ID) %>%
dplyr::slice(which.min(dpi)) %>%
dplyr::select(EH_ID, weight, HI, startingWeight, ageAtInfection, Sex,
Mouse_genotype, Eimeria_species, Mouse_subspecies,
infection_isolate, Exp_ID, dpi))
aggregate(d$dpi,
list(d$infection_isolate),
function(x) {paste(length(x), median(x), round(sd(x),2))})
###### Course of infection FIGURE 2 ######
rawDF108mice$parasiteDensity <- rawDF108mice$oocysts.per.tube / rawDF108mice$weight
forplot <- rawDF108mice %>%
group_by(infection_isolate, dpi) %>%
summarise(mean = mean(parasiteDensity*10e-6, na.rm = TRUE),
sd = sd(parasiteDensity*10e-6, na.rm = TRUE),
n = n()) %>%
mutate(se = sd / sqrt(n),
lower.ci = mean - qt(1 - (0.05 / 2), n - 1) * se,
upper.ci = mean + qt(1 - (0.05 / 2), n - 1) * se)
F2.1 <- ggplot(forplot, aes(dpi, mean, group = infection_isolate, col = infection_isolate)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = .2)+
ylab("parasite density (10e6 oocysts per mouse gram)") +
scale_x_continuous(breaks = 0:11, name = "days post infection") +
theme(legend.position = c(0.25, 0.8)) +
labs(color = "Eimeria isolate")
forplot2 <- rawDF108mice %>%
group_by(infection_isolate, dpi) %>%
summarise(mean = mean(relativeWeight, na.rm = TRUE),
sd = sd(relativeWeight, na.rm = TRUE),
n = n()) %>%
mutate(se = sd / sqrt(n),
lower.ci = mean - qt(1 - (0.05 / 2), n - 1) * se,
upper.ci = mean + qt(1 - (0.05 / 2), n - 1) * se)
F2.2 <- ggplot(forplot2, aes(dpi, mean, group = infection_isolate,
col = infection_isolate)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = .2)+
ylab("relative weight compared to day 0 (%)") +
scale_x_continuous(breaks = 0:11, name = "days post infection") +
theme(legend.position = c(0.25, 0.2)) +
labs(color = "Eimeria isolate")
library(cowplot)
Fig2 <- plot_grid(F2.1, F2.2,
labels=c("A", "B"), label_size = 20)
#pdf(file = "../figures/Fig2.pdf", width = 10, height = 5)
Fig2
## Correlation sum of oocysts / peak oocysts
ggplot(summaryDF108mice, aes(sumoocysts.per.tube, max.oocysts.per.tube)) +
geom_smooth(method = "lm")+ geom_point()
cor(summaryDF108mice$sumoocysts.per.tube , summaryDF108mice$max.oocysts.per.tube,
method = "pearson")
## RESISTANCE
# for models, inverse of parasite density:
summaryDF108mice$peak.oocysts.per.g.mouse
# for plots, invert + translation positive (300000) / 10000:
getResistanceIndex <- function(x){
y = (- x + 300000)/300000
return(y)}
summaryDF108mice$ResistanceIndex <- getResistanceIndex(summaryDF108mice$peak.oocysts.per.g.mouse)
plotChoiceResIndex <- ggplot(summaryDF108mice, aes(peak.oocysts.per.g.mouse, ResistanceIndex)) +
geom_point(size = 4, pch =21) +
ylab("Resistance Index") +
xlab("Parasite density (oocysts per mouse gram) at peak day")
plotChoiceResIndex
xRes <- as.numeric(na.omit(summaryDF108mice$peak.oocysts.per.g.mouse))
hist(xRes, breaks = 100)
descdist(xRes)
#pdf("../figures/supfig1.1.pdf")
findGoodDist(x = xRes, distribs = c("normal", "negative binomial"),
distribs2 = c("norm", "nbinom"))
## IMPACT ON HEALTH
xImp <- as.numeric(na.omit(summaryDF108mice$relWL))
hist(xImp, breaks = 100)
descdist(xImp)
#pdf("../figures/supfig1.2.pdf")
findGoodDist(x = xImp+ 0.01, distribs = c("normal", "weibull"),
distribs2 = c("norm", "weibull"))
#dev.off()
### weibull for impact on health
summaryDF108mice$impact <- summaryDF108mice$relWL + 0.01
## TOLERANCE
summaryDF108mice$ToleranceIndex <- log10(
summaryDF108mice$relWL / summaryDF108mice$peak.oocysts.per.g.mouse + 1e-8) / (-8)
plotChoiceTolIndex <- ggplot(summaryDF108mice,
aes(x=peak.oocysts.per.g.mouse, y =relWL, fill = ToleranceIndex))+
geom_point(size = 4, pch =21) +
scale_fill_gradient(low = "white", high = "black") +
xlab("Parasite density (oocysts per mouse gram) at peak day") +
ylab("Maximum relative weight loss compared to day 0 (%)") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
labs(fill = "Tolerance Index") +
theme(
legend.position = c(.95, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6)
)
plotChoiceTolIndex
xTol <- as.numeric(na.omit(summaryDF108mice$ToleranceIndex))
# for tolerance, we need to find a way to deal with the massive extreme values
hist(xTol, breaks = 1000)
descdist(xTol)
#pdf("../figures/supfig1.3.pdf")
findGoodDist(x = xTol, distribs = c("normal"),
distribs2 = c("norm"))
summaryDF108mice[is.na(summaryDF108mice$ToleranceIndex), c("EH_ID", "Mouse_genotype", "relWL", "peak.oocysts.per.g.mouse")]
#
pdf(file = "../figures/choiceIndexes.pdf", width = 10, height = 5)
dev.off()
#plot_grid(plotChoiceResIndex,
# plotChoiceTolIndex,
#  labels=c("A", "B"), label_size = 15)
dev.off()
################
## Resistance ##
################
# Mmd vs Mmm
modResSubsp <- glm.nb(peak.oocysts.per.g.mouse ~ Eimeria_species*Mouse_subspecies, data = summaryDF108mice)
modResSubsp
anova(modResSubsp)
summary(modResSubsp)
### POST-HOC: all by all
summaryDF108mice$intFac1 <- interaction(summaryDF108mice$Eimeria_species,
summaryDF108mice$Mouse_subspecies, drop=T)
modResSubsp_multicomp <- glm.nb(peak.oocysts.per.g.mouse ~ intFac1, data = summaryDF108mice)
postHocResSubsp <- summary(glht(modResSubsp_multicomp, linfct=mcp(intFac = "Tukey")))
postHocResSubsp <- summary(glht(modResSubsp_multicomp, linfct=mcp(intFac1 = "Tukey")))
postHocResSubsp
### Create matrix for posthoc test
getMatrixPostHoc <- function(postHoc){
pvalues <- postHoc$test$pvalues
pvalues <- unlist(lapply(pvalues, function(i){if(i < 0.001) {
i <- "< 0.001"
} else if (i < 0.01){
i <- "< 0.01"
} else {i <- round(i, 2)}}))
upperTriangle <- paste0("est:", round(postHoc$test$coefficients, 2), ", Std.Error:",round(postHoc$test$sigma, 2))
lowerTriangle <- paste0("z value:", round(postHoc$test$tstat, 2), ", Pr(>|z|):", pvalues)
getMatrix <- function(postHoc, toFillUpWith){
x <- strsplit(names(postHoc$test$coefficients), " - ")
rownames <- as.character(unlist(lapply(x, `[[`, 1)))
colnames <- as.character(unlist(lapply(x, `[[`, 2)))
myDf_PostHoc <- data.frame(colnames = colnames, rownames = rownames, toFillUpWith = toFillUpWith)
#fill gaps to have 12 rows and 12 columns
myDf_PostHoc <- rbind(data.frame(colnames = myDf_PostHoc$colnames[1],
rownames = myDf_PostHoc$colnames[1], toFillUpWith = "diagonal"),
myDf_PostHoc,
data.frame(colnames = myDf_PostHoc$rownames[length(myDf_PostHoc$rownames)],
rownames = myDf_PostHoc$rownames[length(myDf_PostHoc$rownames)], toFillUpWith = "diagonal"))
# Create matrix
mat <- reshape(myDf_PostHoc, idvar = "colnames", timevar = "rownames", direction = "wide")
rownames(mat) <- mat$colnames
mat <- mat[!names(mat) %in% "colnames"]
colnames(mat) <- gsub("toFillUpWith.", "", colnames(mat))
return(mat)
}
### make matrix 1: estimates and standard errors
mat1 <- getMatrix(postHocRes, upperTriangle)
### make matrix 2: z value and P
mat2 <- getMatrix(postHocRes, lowerTriangle)
mat3 <- t(mat2)
## Combine
mat <- mat1
mat[] <- lapply(mat, as.character)
mat[lower.tri(mat)] <- mat3[lower.tri(mat3)]
mat <- as.matrix(mat)
diag(mat) <- ""
return(mat)
}
myMatpostHoc_Res_Subsp <- getMatrixPostHoc(postHocResSubsp)
myMatpostHoc_Res_Subsp <- getMatrixPostHoc(postHocResSubsp)
### Create matrix for posthoc test
getMatrixPostHoc <- function(postHoc){
pvalues <- postHoc$test$pvalues
pvalues <- unlist(lapply(pvalues, function(i){if(i < 0.001) {
i <- "< 0.001"
} else if (i < 0.01){
i <- "< 0.01"
} else {i <- round(i, 2)}}))
upperTriangle <- paste0("est:", round(postHoc$test$coefficients, 2), ", Std.Error:",round(postHoc$test$sigma, 2))
lowerTriangle <- paste0("z value:", round(postHoc$test$tstat, 2), ", Pr(>|z|):", pvalues)
getMatrix <- function(postHoc, toFillUpWith){
x <- strsplit(names(postHoc$test$coefficients), " - ")
rownames <- as.character(unlist(lapply(x, `[[`, 1)))
colnames <- as.character(unlist(lapply(x, `[[`, 2)))
myDf_PostHoc <- data.frame(colnames = colnames, rownames = rownames, toFillUpWith = toFillUpWith)
#fill gaps to have 12 rows and 12 columns
myDf_PostHoc <- rbind(data.frame(colnames = myDf_PostHoc$colnames[1],
rownames = myDf_PostHoc$colnames[1], toFillUpWith = "diagonal"),
myDf_PostHoc,
data.frame(colnames = myDf_PostHoc$rownames[length(myDf_PostHoc$rownames)],
rownames = myDf_PostHoc$rownames[length(myDf_PostHoc$rownames)], toFillUpWith = "diagonal"))
# Create matrix
mat <- reshape(myDf_PostHoc, idvar = "colnames", timevar = "rownames", direction = "wide")
rownames(mat) <- mat$colnames
mat <- mat[!names(mat) %in% "colnames"]
colnames(mat) <- gsub("toFillUpWith.", "", colnames(mat))
return(mat)
}
### make matrix 1: estimates and standard errors
mat1 <- getMatrix(postHoc, upperTriangle)
### make matrix 2: z value and P
mat2 <- getMatrix(postHoc, lowerTriangle)
mat3 <- t(mat2)
## Combine
mat <- mat1
mat[] <- lapply(mat, as.character)
mat[lower.tri(mat)] <- mat3[lower.tri(mat3)]
mat <- as.matrix(mat)
diag(mat) <- ""
return(mat)
}
myMatpostHoc_Res_Subsp <- getMatrixPostHoc(postHocResSubsp)
write.csv(myMatpostHoc_Res_Subsp, "../figures/matrixPostHoc_Res_Subsp.csv")
