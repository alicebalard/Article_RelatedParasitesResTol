distribs2 = c("norm", "weibull"))
#dev.off()
### weibull for impact on health
art2al_SUMdf$impact <- art2al_SUMdf$relWL + 0.01
SUBsummaryDF77mice$impact <- SUBsummaryDF77mice$relWL + 0.01
# 9 mice died before peak
################################
##### Statistical analyses #####
################################
## LRT test
homemadeGtest <- function(full, base, round = "yes"){
dLL = logLik(full) - logLik(base)
dDF = base$df.residual - full$df.residual
pvalue <- 1 - stats::pchisq(2*dLL, df=dDF)
if(round == "yes"){
pvalue <- round(pvalue, 6)
}
chisqvalue <- stats::qchisq(p = pvalue, df=dDF)
print(paste0("G=",round(2*dLL, 1), " ,df=", dDF, " ,p=", pvalue))
}
## LRT significance for each factor
myLRTsignificanceFactors <- function(modFull, modPar, modMouse, modInt){
print("significance of parasite:")
homemadeGtest(modFull, modPar)
print("significance of mouse:")
homemadeGtest(modFull, modMouse)
print("significance of interaction:")
homemadeGtest(modFull, modInt)
}
# for posthoc tests
art2al_SUMdf$intFacSTRAINS <- interaction(art2al_SUMdf$infection_isolate,
art2al_SUMdf$Mouse_genotype, drop=T)
SUBsummaryDF77mice$intFacSTRAINS <- interaction(SUBsummaryDF77mice$infection_isolate,
SUBsummaryDF77mice$Mouse_genotype, drop=T)
testSignif <- function(dataframe, which){
if(which == "RES"){
modFULL <- glm.nb(max.OPG ~ infection_isolate*Mouse_genotype, data = dataframe)
modPara <- glm.nb(max.OPG ~ Mouse_genotype, data = dataframe)
modMous <- glm.nb(max.OPG ~ infection_isolate, data = dataframe)
modinter <- glm.nb(max.OPG ~ infection_isolate+Mouse_genotype, data = dataframe)
} else if (which == "IMP"){
modFULL <- survreg(Surv(impact)~infection_isolate*Mouse_genotype, data = dataframe, dist="weibull")
modPara <- survreg(Surv(impact)~Mouse_genotype, data = dataframe, dist="weibull")
modMous <- survreg(Surv(impact)~infection_isolate, data = dataframe, dist="weibull")
modinter <- survreg(Surv(impact)~infection_isolate+Mouse_genotype, data = dataframe, dist="weibull")
}
return(list(modfull = modFULL, LRT = myLRTsignificanceFactors(modFULL, modPara, modMous, modinter)))
}
testPostHoc <- function(dataframe, which){
if(which == "RES"){
mod_multicomp <- glm.nb(max.OPG ~ intFacSTRAINS, data = dataframe)
} else if(which == "IMP"){
mod_multicomp <- survreg(Surv(impact)~intFacSTRAINS, data = dataframe, dist="weibull")
}
return(summary(glht(mod_multicomp, linfct=mcp(intFacSTRAINS = "Tukey"))))
}
###############################
## Test factors significance ##
###############################
# Resistance
coef(testSignif(art2al_SUMdf, "RES"))
# [1] "significance of parasite:"
# [1] "G=35.5 ,df=8 ,p=2.2e-05"
# [1] "significance of mouse:"
# [1] "G=36.3 ,df=9 ,p=3.5e-05"
# [1] "significance of interaction:"
# [1] "G=21.8 ,df=6 ,p=0.00131"
coef(testSignif(SUBsummaryDF77mice, "RES"))
# [1] "significance of parasite:"
# [1] "G=28.5 ,df=8 ,p=0.000393"
# [1] "significance of mouse:"
# [1] "G=31.8 ,df=9 ,p=0.000216"
# [1] "significance of interaction:"
# [1] "G=19.9 ,df=6 ,p=0.002856"
ggpredict(testSignif(art2al_SUMdf, "RES")$modfull, terms = c("Mouse_genotype", "infection_isolate"))
# Predicted values of max.OPG
# x = Mouse_genotype
# # infection_isolate = Brandenburg139 (E. ferrisi)
# x predicted std.error conf.low conf.high
# MMd_F0 (Sc-Sc)  508998.8     0.269 300677.9  861652.3
# MMd_F0 (St-St)  649984.3     0.269 383961.5 1100317.6
# MMm_F0 (Bu-Bu)  503079.7     0.269 297181.3  851632.1
# MMm_F0 (Pw-Pw)  896458.8     0.269 529560.2 1517558.3
#
# # infection_isolate = Brandenburg64 (E. ferrisi)
# x predicted std.error  conf.low conf.high
# MMd_F0 (Sc-Sc)  456384.5     0.176  323345.7  644161.5
# MMd_F0 (St-St)  878777.5     0.170  629926.8 1225935.9
# MMm_F0 (Bu-Bu) 1102932.1     0.176  781421.1 1556726.8
# MMm_F0 (Pw-Pw) 1689484.9     0.182 1181520.0 2415836.6
#
# # infection_isolate = Brandenburg88 (E. falciformis)
# x predicted std.error  conf.low conf.high
# MMd_F0 (Sc-Sc) 1136492.8     0.269  671354.2 1923896.4
# MMd_F0 (St-St) 2118816.9     0.249 1301479.0 3449448.5
# MMm_F0 (Bu-Bu) 1392974.0     0.465  559719.4 3466695.5
# MMm_F0 (Pw-Pw)  414254.5     0.329  217406.1  789337.5
# Impact
coef(testSignif(art2al_SUMdf, "IMP")) #  "G=10.3 ,df=6 ,p=0.114453"
# [1] "significance of parasite:"
# [1] "G=30.7 ,df=8 ,p=0.000159"
# [1] "significance of mouse:"
# [1] "G=23 ,df=9 ,p=0.006115"
# [1] "significance of interaction:"
# [1] "G=10.3 ,df=6 ,p=0.114453"
coef(testSignif(SUBsummaryDF77mice, "IMP"))
# [1] "significance of parasite:"
# [1] "G=38 ,df=8 ,p=8e-06"
# [1] "significance of mouse:"
# [1] "G=31.6 ,df=9 ,p=0.000235"
# [1] "significance of interaction:"
# [1] "G=23.8 ,df=6 ,p=0.000579"
## Translation of 1% because Weibull doesn't support nul data
coef(testSignif(art2al_SUMdf, "IMP")$modfull)
coefImp <- exp(coef(testSignif(art2al_SUMdf, "IMP")$modfull))
# marginal effect for each combination:
predImp <- ggpredict(testSignif(art2al_SUMdf, "IMP")$modfull, terms = c("Mouse_genotype", "infection_isolate"))
## NB substract 0.01 to each value, as it was added to model!
predImp <- data.frame(predImp)
predImp[c("predicted", "conf.low", "conf.high")]  <- predImp[c("predicted", "conf.low", "conf.high")] - 0.01
predImp
# x                 predicted  std.error conf.low   conf.high                          group
# 1  MMd_F0 (Sc-Sc) 0.08162452 0.2204047 0.04948437 0.13113037    Brandenburg139 (E. ferrisi)
# 2  MMd_F0 (Sc-Sc) 0.05407199 0.1574559 0.03705887 0.07723583     Brandenburg64 (E. ferrisi)
# 3  MMd_F0 (Sc-Sc) 0.12165590 0.2388303 0.07244183 0.20024856 Brandenburg88 (E. falciformis)
# 4  MMd_F0 (St-St) 0.10504376 0.2443933 0.06125824 0.17573384    Brandenburg139 (E. ferrisi)
# 5  MMd_F0 (St-St) 0.04110312 0.1528678 0.02787268 0.05895547     Brandenburg64 (E. ferrisi)
# 6  MMd_F0 (St-St) 0.06991219 0.2212570 0.04179391 0.11329553 Brandenburg88 (E. falciformis)
# 7  MMm_F0 (Bu-Bu) 0.06322701 0.2384227 0.03589079 0.10684687    Brandenburg139 (E. ferrisi)
# 8  MMm_F0 (Bu-Bu) 0.07587708 0.1564709 0.05319591 0.10669857     Brandenburg64 (E. ferrisi)
# 9  MMm_F0 (Bu-Bu) 0.18057140 0.2204249 0.11371766 0.28355112 Brandenburg88 (E. falciformis)
# 10 MMm_F0 (Pw-Pw) 0.08692038 0.2385478 0.05072435 0.14469181    Brandenburg139 (E. ferrisi)
# 11 MMm_F0 (Pw-Pw) 0.10082160 0.1624209 0.07060676 0.14236224     Brandenburg64 (E. ferrisi)
# 12 MMm_F0 (Pw-Pw) 0.19613163 0.2204155 0.12382171 0.30751385 Brandenburg88 (E. falciformis)
####################
## Post-hoc tests ##
####################
# to avoid running these long test all the time
doYouRun = "keepit"
if (doYouRun == "foncebebe"){
# Resistance
testPostHoc(art2al_SUMdf, "RES", "STRAINS")
testPostHoc(SUBsummaryDF77mice, "RES", "STRAINS")
# Impact
testPostHoc(art2al_SUMdf, "IMP", "STRAINS")
testPostHoc(SUBsummaryDF77mice, "IMP", "STRAINS")
}
#################
## save output ##
#################
doYouSave = "notthistime"
if (doYouSave == "foncebebe"){
# Resistance
write.csv(getMatrixPostHoc(testPostHoc(art2al_SUMdf, "RES")),
"../figures/Tab_posthocResSTRAINS.csv")
write.csv(getMatrixPostHoc(testPostHoc(SUBsummaryDF77mice, "RES")),
"../figures/Tab_posthocResSTRAINS_77mice.csv")
# Impact
write.csv(getMatrixPostHoc(testPostHoc(art2al_SUMdf, "IMP")),
"../figures/Tab_posthocImpSTRAINS.csv")
write.csv(getMatrixPostHoc(testPostHoc(SUBsummaryDF77mice, "IMP")),
"../figures/Tab_posthocImpSTRAINS_77mice.csv")
}
##########
## plot ##
##########
## To add Ns on top of bars
getNs <- function(proxy, df, groupMus = "Mouse_genotype", groupPar = "infection_isolate"){
noNA = df[!is.na(df[[proxy]]),]
noNA$groupMus = noNA[[groupMus]]
noNA$groupPar = noNA[[groupPar]]
tab = table(noNA$groupPar, noNA$groupMus)
Ns = as.character(as.vector(t(tab)[as.vector(t(tab))!=0]))
return(Ns)
}
############
## Resistance
# plot marginal effects of interaction terms by isolates & strains
posx.2 <- c(0.8+c(0,1/8,2/8,3/8),1.8+c(0,1/8,2/8,3/8),2.8+c(0,1/8,2/8,3/8))
get_plotR_STRAINS <- function(dataframe){
plot_model(testSignif(dataframe, "RES")$modfull,
type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "cornflowerblue", "red4", "indianred1"),
name = "Mouse strain",labels = c("SCHUNT", "STRA", "BUSNA", "PWD")) +
scale_y_continuous("(predicted) maximum oocysts per gram of feces (x10e6)",
breaks = seq(0, 3500000, 500000),
labels = seq(0, 3500000, 500000)/1000000)+
ggtitle("Maximum parasite load \n(mean and 95%CI)") +
xlab("Eimeria isolate") +
theme(axis.title.x = element_text(hjust=1), axis.text=element_text(size=13)) +
geom_text(aes(x=posx.2,y=120000,label=getNs("max.OPG", dataframe)),vjust=0)
}
plotR_STRAINS <- get_plotR_STRAINS(art2al_SUMdf)
plotR_STRAINS
plotR_STRAINS_77mice <- get_plotR_STRAINS(SUBsummaryDF77mice)
plotR_STRAINS_77mice
############
## Impact ##
## NB: art2al_SUMdf$impact <- art2al_SUMdf$relWL + 0.01
art2al_SUMdf %>%
group_by(Mouse_subspecies, Eimeria_species) %>%
summarise(meanImp = mean(impact, na.rm = T))
## NB. translate back 0.01
transValuesImp <- seq(0.01,0.31, 0.05)
as.character(transValuesImp - 0.01)
realValuesImpLabels <- c("0%", "5%", "10%", "15%", "20%", "25%", "30%")
get_plotI_STRAINS <- function(dataframe){
plot_model(testSignif(dataframe, "IMP")$modfull,
type = "int",dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "cornflowerblue", "red4", "indianred1"),
name = "Mouse strain",labels = c("SCHUNT", "STRA", "BUSNA", "PWD")) +
xlab("Eimeria isolate") +
ggtitle("Maximum weight loss \n(mean and 95%CI)") +
scale_y_continuous(breaks = transValuesImp, labels = realValuesImpLabels,
name = "(predicted) maximum weight loss compared to day of infection")+
theme(axis.title.x = element_text(hjust=1), axis.text=element_text(size=13)) +
geom_text(aes(x=posx.2,y=0,label=getNs("relWL", dataframe)),vjust=0)
}
plotI_STRAINS  <- get_plotI_STRAINS(art2al_SUMdf)
plotI_STRAINS
plotI_STRAINS_77mice <- get_plotI_STRAINS(SUBsummaryDF77mice)
plotI_STRAINS_77mice
# Fig 3.
Fig3 <- cowplot::plot_grid(plotR_STRAINS + theme(legend.position = "none"),
plotI_STRAINS + theme(legend.position = "none"),
plotR_STRAINS,
labels=c("A", "B", "C"), label_size = 20)
Fig3
pdf(file = "../figures/Fig3.pdf",
width = 9, height = 9)
Fig3
dev.off()
### SUB df
pdf(file = "../figures/FigSTRAINS_77mice.pdf",
width = 9, height = 9)
cowplot::plot_grid(
plotR_STRAINS_77mice + theme(legend.position = "none"),
plotI_STRAINS_77mice + theme(legend.position = "none"),
plotR_STRAINS_77mice,
labels=c("A", "B", "C"), label_size = 20)
dev.off()
########################################
### Second part: assessing tolerance ###
########################################
########################################
### Second part: assessing tolerance ###
########################################
toleranceAnalysis <- function(dataset){
modfull <- lm(relWL ~ 0 + max.OPG : (infection_isolate * Mouse_genotype), data = dataset)
modNOmouse <- lm(relWL ~ 0 + max.OPG : (infection_isolate), data = dataset)
modNOisolate <- lm(relWL ~ 0 + max.OPG : (Mouse_genotype), data = dataset)
modNOint <- lm(relWL ~ 0 + max.OPG : (infection_isolate + Mouse_genotype), data = dataset)
testIsolate <- homemadeGtest(modfull, modNOisolate)
# [1] "G=30.2 ,df=8 ,p=0.000197"
testMouse <- homemadeGtest(modfull, modNOmouse)
# [1] "G=30.6 ,df=9 ,p=0.000341"
testInteraction <- homemadeGtest(modfull, modNOint)
# [1] "G=24 ,df=6 ,p=0.000513"
# Calculate slopes for each group:
predTolSlopes <- ggpredict(modfull, terms = c("Mouse_genotype", "infection_isolate"), condition = c(max.OPG = 1000000))  ## And plot
predTolSlopes <- data.frame(predTolSlopes)
names(predTolSlopes)[names(predTolSlopes) %in% c("x", "group")] <- c("Mouse_genotype", "infection_isolate")
# make line up to 5e6 OPG for plot
pts <- predTolSlopes
pts$predicted <- pts$predicted*5
pts$relWL_OPGnull <- 0
names(pts)[names(pts) %in% c("predicted")] <- "relWL_5MOPG"
pts <- melt(pts, measure.vars = c("relWL_OPGnull", "relWL_5MOPG"))
names(pts)[names(pts) %in% c("variable", "value")] <- c("max.OPG", "relWL")
pts$max.OPG <- as.character(pts$max.OPG)
pts$max.OPG[pts$max.OPG %in% "relWL_OPGnull"] <- "0"
pts$max.OPG[pts$max.OPG %in% "relWL_5MOPG"] <- "5e6"
pts$max.OPG <- as.numeric(pts$max.OPG)
pts$group <- factor(paste(pts$Mouse_genotype, pts$infection_isolate, sep = "_"))
T1 <- ggplot(pts, aes(x = max.OPG, y = relWL, col = Mouse_genotype)) +
geom_line(aes(group = group)) +
facet_grid(.~infection_isolate) +
scale_color_manual(values = c("blue", "cornflowerblue", "red4", "indianred1"),
name = "Mouse strain",labels = c("SCHUNT", "STRA", "BUSNA", "PWD")) +
scale_x_continuous("maximum oocysts per gram of feces (x10e6)",
breaks = seq(0, 5000000, 1000000),
labels = seq(0, 5000000, 1000000)/1000000) +
scale_y_continuous(name = "maximum weight loss compared to day of infection",
breaks = seq(0,0.3, 0.05),
labels = c("0%", "5%", "10%", "15%", "20%", "25%", "30%")) +
geom_point(data = dataset, size = 4, pch = 1)+
coord_cartesian(ylim=c(0, 0.30)) +
theme(legend.position = "top")
return(list(testIsolate = testIsolate, testMouse = testMouse, testInteraction = testInteraction,
predTolSlopes = predTolSlopes, T1 = T1))
}
toleranceAnalysis(dataset = art2al_SUMdf)
dataset = art2al_SUMdf
# APA format (note the S should be subscript)
cor_apa(cor.test(dataset$relWL, dataset$max.OPG,
method = c("kendall")),format ="text")
sapply(levels(dataset$Mouse_genotype), function(mg){
sapply(levels(dataset$infection_isolate), function(ii){
# APA format (note the S should be subscript)
cor_apa(cor.test(dataset$relWL, dataset$max.OPG,
method = c("kendall")),format ="text")
})})
sapply(levels(dataset$Mouse_genotype), function(mg){
sapply(levels(dataset$infection_isolate), function(ii){
# APA format (note the S should be subscript)
cor.test(dataset$relWL, dataset$max.OPG,
method = c("kendall")),format ="text")
})})
getStuff <- function(what){
sapply(levels(dataset$Mouse_genotype), function(mg){
sapply(levels(dataset$infection_isolate), function(ii){
# APA format (note the S should be subscript)
cor.test(dataset$relWL, dataset$max.OPG,
method = c("kendall"))
})}
)
}
getStuff(dataset)
dataset = art2al_SUMdf[dataset$Mouse_genotype %in% levels(dataset$Mouse_genotype)[1] &
dataset$infection_isolate %in% levels(dataset$infection_isolate)[1], ]
dataset = art2al_SUMdf[art2al_SUMdf$Mouse_genotype %in% levels(art2al_SUMdf$Mouse_genotype)[1] &
art2al_SUMdf$infection_isolate %in% levels(art2al_SUMdf$infection_isolate)[1], ]
cor.test(dataset$relWL, dataset$max.OPG,
method = c("kendall"))
cor.test(dataset$relWL, dataset$max.OPG, method = c("kendall"))
cor.test(dataset$relWL, dataset$max.OPG, method = c("spearman"))
cor.test(dataset$relWL, dataset$max.OPG, method = c("kendall"))
cor.test(dataset$relWL, dataset$max.OPG, method = c("spearman"))
dataset
names(dataset)
dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG"),]
dataset = art2al_SUMdf[art2al_SUMdf$Mouse_genotype %in% levels(art2al_SUMdf$Mouse_genotype)[1] &
art2al_SUMdf$infection_isolate %in% levels(art2al_SUMdf$infection_isolate)[1], ]
dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG"),]
dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG")]
dataset <- dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG")]
dataset[1,]
# add a null point for zero intercept
dataset[1,]
# add a null point for zero intercept
rbind(dataset, dataset[1,])
# add a null point for zero intercept
rbind(dataset[1,], dataset)
# add a null point for zero intercept
dataset <- rbind(dataset[1,], dataset)
dataset[1,c("relWL", "max.OPG")]
dataset[1,c("relWL", "max.OPG")] <- c(0,0)
dataset
cor.test(dataset$relWL, dataset$max.OPG, method = c("spearman"))
c <- cor.test(dataset$relWL, dataset$max.OPG, method = c("spearman"))
c$statistic
c$p.value
c$estimate
dataset$Mouse_genotype
level(dataset$Mouse_genotype)
unique(dataset$Mouse_genotype)
unique(dataset$infection_isolate)
data.frame(Mouse_genotype = unique(dataset$Mouse_genotype),
dataset$infection_isolate = unique(dataset$infection_isolate),
S = c$statistic, pval = c$p.value, Rho = c$estimate)
data.frame(dataset$Mouse_genotype = unique(dataset$Mouse_genotype),
dataset$infection_isolate = unique(dataset$infection_isolate),
S = c$statistic, pval = c$p.value, Rho = c$estimate)
data.frame(Mouse_genotype = unique(dataset$Mouse_genotype),
infection_isolate = unique(dataset$infection_isolate),
S = c$statistic, pval = c$p.value, Rho = c$estimate)
df <- data.frame(Mouse_genotype = NA, infection_isolate = NA,
S = NA, pval = NA, Rho = NA)
dataset <- dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG")]
# add a null point for zero intercept
dataset <- rbind(dataset[1,], dataset)
dataset[1,c("relWL", "max.OPG")] <- c(0,0)
c <- cor.test(dataset$relWL, dataset$max.OPG, method = c("spearman"))
d <- data.frame(Mouse_genotype = unique(dataset$Mouse_genotype),
infection_isolate = unique(dataset$infection_isolate),
S = c$statistic, pval = c$p.value, Rho = c$estimate)
dataset = art2al_SUMdf
df <- data.frame(Mouse_genotype = NA, infection_isolate = NA,
S = NA, pval = NA, Rho = NA)
for (i in unique(dataset$Mouse_genotype)) {
for (j in unique(dataset$infection_isolate))
}
dataset = art2al_SUMdf
df = data.frame(Mouse_genotype = NA, infection_isolate = NA,
S = NA, pval = NA, Rho = NA)
for (i in unique(dataset$Mouse_genotype)) {
for (j in unique(dataset$infection_isolate)){
dataset = dataset[dataset$Mouse_genotype %in% i &
dataset$infection_isolate %in% j,]
dataset = dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG")]
# add a null point for zero intercept
dataset <- rbind(dataset[1,], dataset)
dataset[1,c("relWL", "max.OPG")] <- c(0,0)
c <- cor.test(dataset$relWL, dataset$max.OPG, method = c("spearman"))
# S = , p-value =
# alternative hypothesis: true rho is not equal to 0
# sample estimates: Rho
d <- data.frame(Mouse_genotype = unique(dataset$Mouse_genotype),
infection_isolate = unique(dataset$infection_isolate),
S = c$statistic, pval = c$p.value, Rho = c$estimate)
merge(df, d)
}
}
for (i in unique(dataset$Mouse_genotype)) {
for (j in unique(dataset$infection_isolate)){
dataset = dataset[dataset$Mouse_genotype %in% i &
dataset$infection_isolate %in% j,]
dataset = dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG")]
# add a null point for zero intercept
dataset <- rbind(dataset[1,], dataset)
dataset[1,c("relWL", "max.OPG")] <- c(0,0)
tryCatch({
c <- cor.test(dataset$relWL, dataset$max.OPG, method = c("spearman"))
# S = , p-value =
# alternative hypothesis: true rho is not equal to 0
# sample estimates: Rho
d <- data.frame(Mouse_genotype = unique(dataset$Mouse_genotype),
infection_isolate = unique(dataset$infection_isolate),
S = c$statistic, pval = c$p.value, Rho = c$estimate)
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
merge(df, d)
}
}
dataset = art2al_SUMdf
df = data.frame(Mouse_genotype = NA, infection_isolate = NA,
S = NA, pval = NA, Rho = NA)
for (i in unique(dataset$Mouse_genotype)) {
for (j in unique(dataset$infection_isolate)){
dataset = dataset[dataset$Mouse_genotype %in% i &
dataset$infection_isolate %in% j,]
dataset = dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG")]
# add a null point for zero intercept
dataset <- rbind(dataset[1,], dataset)
dataset[1,c("relWL", "max.OPG")] <- c(0,0)
tryCatch({
c <- cor.test(dataset$relWL, dataset$max.OPG, method = c("spearman"))
# S = , p-value =
# alternative hypothesis: true rho is not equal to 0
# sample estimates: Rho
d <- data.frame(Mouse_genotype = unique(dataset$Mouse_genotype),
infection_isolate = unique(dataset$infection_isolate),
S = c$statistic, pval = c$p.value, Rho = c$estimate)
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
df <- merge(df, d)
}
}
df
cor_fun<- function(x,y){
val <- tryCatch(cor(x, y),
error = function(e) e,
warning = function(w) {
# in case there is a warning (for whatever reason)
# return mean of x
return(mean(x))
})
val
}
dataset = art2al_SUMdf
df = data.frame(Mouse_genotype = NA, infection_isolate = NA,
S = NA, pval = NA, Rho = NA)
my.cor.test <- function(x,y){
val <- tryCatch(cor.test(x, y, method = c("spearman")),
error = function(e) e,
warning = function(w) {
# in case there is a warning (for whatever reason)
# return mean of x
return(mean(x))
})
val
}
dataset = art2al_SUMdf
df = data.frame(Mouse_genotype = NA, infection_isolate = NA,
S = NA, pval = NA, Rho = NA)
for (i in unique(dataset$Mouse_genotype)) {
for (j in unique(dataset$infection_isolate)){
dataset = dataset[dataset$Mouse_genotype %in% i &
dataset$infection_isolate %in% j,]
dataset = dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG")]
# add a null point for zero intercept
dataset <- rbind(dataset[1,], dataset)
dataset[1,c("relWL", "max.OPG")] <- c(0,0)
tryCatch({
c <- my.cor.test(dataset$relWL, dataset$max.OPG)
# S = , p-value =
# alternative hypothesis: true rho is not equal to 0
# sample estimates: Rho
d <- data.frame(Mouse_genotype = unique(dataset$Mouse_genotype),
infection_isolate = unique(dataset$infection_isolate),
S = c$statistic, pval = c$p.value, Rho = c$estimate)
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
df <- merge(df, d)
}
}
df
for (i in unique(dataset$Mouse_genotype)) {
for (j in unique(dataset$infection_isolate)){
dataset = dataset[dataset$Mouse_genotype %in% i &
dataset$infection_isolate %in% j,]
dataset = dataset[c("relWL", "Mouse_genotype", "infection_isolate", "max.OPG")]
# add a null point for zero intercept
dataset <- rbind(dataset[1,], dataset)
dataset[1,c("relWL", "max.OPG")] <- c(0,0)
c <- my.cor.test(dataset$relWL, dataset$max.OPG)
# S = , p-value =
# alternative hypothesis: true rho is not equal to 0
# sample estimates: Rho
d <- data.frame(Mouse_genotype = unique(dataset$Mouse_genotype),
infection_isolate = unique(dataset$infection_isolate),
S = c$statistic, pval = c$p.value, Rho = c$estimate)
df <- merge(df, d)
}
}
