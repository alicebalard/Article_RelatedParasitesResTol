get_plotR_SPECIES <- function(dataframe){
plot_model(testSignif(dataframe, "RES", "SPECIES")$modfull,
type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "red"),
name = "Mouse subspecies",labels = c("Mmd", "Mmm")) +
ggtitle("Maximum OPG \n(mean and standard deviation)") +
scale_y_continuous("(predicted) maximum oocysts per gram of feces")+
xlab("Eimeria species") +
theme(axis.title.x = element_text(hjust=1), axis.text=element_text(size=13)) +
geom_text(aes(x=posx.1,y=90000,label=getNs("max.OPG", dataframe,
"Mouse_subspecies", "Eimeria_species")), vjust=0)
}
plotR_SPECIES <- get_plotR_SPECIES(summaryDF108mice)
plotR_SPECIES
# plot marginal effects of interaction terms by isolates & strains
posx.2 <- c(0.8+c(0,1/8,2/8,3/8),1.8+c(0,1/8,2/8,3/8),2.8+c(0,1/8,2/8,3/8))
get_plotR_STRAINS <- function(dataframe){
plot_model(testSignif(dataframe, "RES", "STRAINS")$modfull,
type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "cornflowerblue", "red4", "indianred1"),
name = "Mouse strain",labels = c("SCHUNT", "STRA", "BUSNA", "PWD")) +
scale_y_continuous("(predicted) maximum oocysts per mouse gram")+
ggtitle("Maximum oocysts density \n(mean and standard deviation)") +
xlab("Eimeria isolate") +
theme(axis.title.x = element_text(hjust=1), axis.text=element_text(size=13)) +
geom_text(aes(x=posx.2,y=120000,label=getNs("max.OPG", dataframe)),vjust=0)
}
plotR_STRAINS <- get_plotR_STRAINS(summaryDF108mice)
plotR_STRAINS
plotR_STRAINS_77mice <- get_plotR_STRAINS(SUBsummaryDF77mice)
## NB: summaryDF108mice$impact <- summaryDF108mice$relWL + 0.01
summaryDF108mice %>%
group_by(Mouse_subspecies, Eimeria_species) %>%
summarise(meanImp = mean(impact, na.rm = T))
## NB. translate back 0.01
transValuesImp <- seq(0.01,0.26, 0.05)
as.character(transValuesImp - 0.01)
realValuesImpLabels <- c("0%", "5%", "10%", "15%", "20%", "25%")
get_plotI_SPECIES <- function(dataframe){
plot_model(testSignif(dataframe, "IMP", "SPECIES")$modfull,
type = "int",dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue","red"),
name = "Mouse subspecies",labels = c("Mmd", "Mmm")) +
xlab("Eimeria species") +
ggtitle("Maximum weight loss \n(mean and standard deviation)") +
scale_y_continuous(breaks = transValuesImp, labels = realValuesImpLabels,
name = "(predicted) max weight loss compared to day of infection")+
theme(axis.title.x = element_text(hjust=1), axis.text=element_text(size=13)) +
geom_text(aes(x=posx.1,y=0,label=getNs("relWL", dataframe,
"Mouse_subspecies", "Eimeria_species")),vjust=0)
}
plotI_SPECIES <- get_plotI_SPECIES(summaryDF108mice)
plotI_SPECIES_77mice <- get_plotI_SPECIES(SUBsummaryDF77mice)
get_plotI_STRAINS <- function(dataframe){
plot_model(testSignif(dataframe, "IMP", "STRAINS")$modfull,
type = "int",dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "cornflowerblue", "red4", "indianred1"),
name = "Mouse strain",labels = c("SCHUNT", "STRA", "BUSNA", "PWD")) +
xlab("Eimeria isolate") +
ggtitle("Maximum weight loss \n(mean and standard deviation)") +
scale_y_continuous(breaks = transValuesImp, labels = realValuesImpLabels,
name = "(predicted) max weight loss compared to day of infection")+
theme(axis.title.x = element_text(hjust=1), axis.text=element_text(size=13)) +
geom_text(aes(x=posx.2,y=0,label=getNs("relWL", dataframe)),vjust=0)
}
plotI_STRAINS  <- get_plotI_STRAINS(summaryDF108mice)
plotI_STRAINS
get_plotT_SPECIES <- function(dataframe){
plot_model(testSignif(dataframe, "TOL", "SPECIES")$modfull,
type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "red"),
name = "Mouse subspecies",labels = c("Mmd", "Mmm")) +
xlab("Eimeria species") +
ggtitle("Tolerance index \n(mean and standard deviation)") +
scale_y_continuous("(predicted) tolerance index")+
theme(axis.title.x = element_text(hjust=1), axis.text = element_text(size=13))+
geom_text(aes(x=posx.1,y=0.4,label=getNs("ToleranceIndex", dataframe,
"Mouse_subspecies", "Eimeria_species")),vjust=0)
}
plotT_SPECIES <- get_plotT_SPECIES(summaryDF108mice)
plotT_SPECIES
plot_model(testSignif(dataframe, "TOL", "SPECIES")$modfull,
type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "red"),
name = "Mouse subspecies",labels = c("Mmd", "Mmm")) +
xlab("Eimeria species") +
ggtitle("Tolerance index \n(mean and standard deviation)") +
scale_y_continuous("(predicted) tolerance index")+
theme(axis.title.x = element_text(hjust=1), axis.text = element_text(size=13))+
geom_text(aes(x=posx.1,y=0.7,label=getNs("ToleranceIndex", dataframe,
"Mouse_subspecies", "Eimeria_species")),vjust=0)
get_plotT_SPECIES <- function(dataframe){
plot_model(testSignif(dataframe, "TOL", "SPECIES")$modfull,
type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "red"),
name = "Mouse subspecies",labels = c("Mmd", "Mmm")) +
xlab("Eimeria species") +
ggtitle("Tolerance index \n(mean and standard deviation)") +
scale_y_continuous("(predicted) tolerance index")+
theme(axis.title.x = element_text(hjust=1), axis.text = element_text(size=13))+
geom_text(aes(x=posx.1,y=0.7,label=getNs("ToleranceIndex", dataframe,
"Mouse_subspecies", "Eimeria_species")),vjust=0)
}
plotT_SPECIES <- get_plotT_SPECIES(summaryDF108mice)
plotT_SPECIES
plotT_SPECIES_77mice <- get_plotT_SPECIES(SUBsummaryDF77mice)
get_plotT_STRAINS <- function(dataframe){
plot_model(testSignif(dataframe, "TOL", "STRAINS")$modfull,
type = "int", dot.size = 4, dodge = .5) + # mean-value and +/- 1 standard deviation
scale_color_manual(values = c("blue", "cornflowerblue", "red4", "indianred1"),
name = "Mouse strain",labels = c("SCHUNT", "STRA", "BUSNA", "PWD")) +
xlab("Eimeria isolate") +
ggtitle("Tolerance index \n(mean and standard deviation)") +
scale_y_continuous("(predicted) tolerance index")+
theme(axis.title.x = element_text(hjust=1), axis.text = element_text(size=13))+
geom_text(aes(x=posx.2,y=0.4,label=getNs("ToleranceIndex", dataframe)),vjust=0)
}
plotT_STRAINS <- get_plotT_STRAINS(summaryDF108mice)
plotT_STRAINS_77mice <- get_plotT_STRAINS(SUBsummaryDF77mice)
# Fig 3.
Fig3 <- cowplot::plot_grid(
plotR_STRAINS + theme(legend.position = "none"),
plotI_STRAINS + theme(legend.position = "none"),
plotT_STRAINS+ theme(legend.position = "none"),
plotT_STRAINS,
labels=c("A", "B", "C", "D"), label_size = 20)
Fig3
pdf(file = "../figures/Fig3.pdf",
width = 9, height = 9)
Fig3
dev.off()
## Packages
list.of.packages <- c("parasiteLoad", "bbmle", "devtools", "optimx", # for bbmle it needs to be required(?)
"ggplot2", "VennDiagram","fitdistrplus", # evaluate distribution
"epiR", # Sterne's exact method
"ggmap", "gridExtra",# several plots in one panel
"wesanderson", # nice colors
"ggpubr", "tidyr", "stats", "ggrepel",
"lme4", "lmerTest", "reshape",
"ggeffects", "sjmisc", "sjPlot")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(list.of.packages)
# NB. Let's not consider which parent is which, but make A_B mouse = B_A mouse
# we don't have enough individuals to test this effect, and we are not interested in it anyway!
DF_all$Mouse_strain <- as.character(DF_all$Mouse_strain)
x <- strsplit(DF_all$Mouse_strain, "_")
y <- lapply(x, sort)
z <- unlist(lapply(y, FUN = function(x){paste(x, collapse="-")}))
DF_all$Mouse_genotype <- z
### data preparation
ExpeDF_003_4 <- readRDS(file = "../data/ExpeDF_003_4_Alice.rds")
ExpeDF_005 <- readRDS(file = "../data/ExpeDF_005_Alice.rds")
forMap <- read.csv("../data/geolocalisation.csv")
source("myFunctions.R")
# Define a theme
theme_set(theme_bw())
## Packages
list.of.packages <- c("parasiteLoad", "bbmle", "devtools", "optimx", # for bbmle it needs to be required(?)
"ggplot2", "VennDiagram","fitdistrplus", # evaluate distribution
"epiR", # Sterne's exact method
"ggmap", "gridExtra",# several plots in one panel
"wesanderson", # nice colors
"ggpubr", "tidyr", "stats", "ggrepel",
"lme4", "lmerTest", "reshape",
"ggeffects", "sjmisc", "sjPlot")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(list.of.packages)
## Reinstall the package in case I updated it
devtools::install_github("alicebalard/parasiteLoad")
library(parasiteLoad)
devtools::install_github("vqv/ggbiplot")
library(ggbiplot)
###### data cleaning ######
DF_all<- merge(ExpeDF_003_4, ExpeDF_005, all = T)
# NB. Let's not consider which parent is which, but make A_B mouse = B_A mouse
# we don't have enough individuals to test this effect, and we are not interested in it anyway!
DF_all$Mouse_strain <- as.character(DF_all$Mouse_strain)
x <- strsplit(DF_all$Mouse_strain, "_")
y <- lapply(x, sort)
z <- unlist(lapply(y, FUN = function(x){paste(x, collapse="-")}))
DF_all$Mouse_genotype <- z
rm(c(x, y, z))
rm(x, y, z)
## Order the levels to be more clear in later plots (parents will be low and down
## on the legend, hybrids in between...)
DF_all$Mouse_genotype <- factor(
df$Mouse_genotype,
levels = c("NMRI", "WSB", "WP", "PWD1", "SCHUNT-SCHUNT",
"STRA-STRA", "SCHUNT-STRA", "BUSNA-STRA","PWD-SCHUNT",
"BUSNA-PWD", "BUSNA-BUSNA", "PWD-PWD"),
labels = c("NMRI", "MMd_F0 (Ws-Ws)", "Mmm-Mmd_Hybrid (WP)", "MMm_F0 (Pw1-Pw1)", "MMd_F0 (Sc-Sc)",
"MMd_F0 (St-St)", "MMd_F1 (Sc-St)", "Mmm-Mmd_F1 (Bu-St)", "Mmm-Mmd_F1 (Pw-Sc)",
"MMm_F1 (Bu-Pw)", "MMm_F0 (Bu-Bu)", "MMm_F0 (Pw-Pw)"))
###### data cleaning ######
DF_all<- merge(ExpeDF_003_4, ExpeDF_005, all = T)
# NB. Let's not consider which parent is which, but make A_B mouse = B_A mouse
# we don't have enough individuals to test this effect, and we are not interested in it anyway!
DF_all$Mouse_strain <- as.character(DF_all$Mouse_strain)
x <- strsplit(DF_all$Mouse_strain, "_")
y <- lapply(x, sort)
z <- unlist(lapply(y, FUN = function(x){paste(x, collapse="-")}))
DF_all$Mouse_genotype <- z
## Order the levels to be more clear in later plots (parents will be low and down
## on the legend, hybrids in between...)
DF_all$Mouse_genotype <- factor(
DF_all$Mouse_genotype,
levels = c("NMRI", "WSB", "WP", "PWD1", "SCHUNT-SCHUNT",
"STRA-STRA", "SCHUNT-STRA", "BUSNA-STRA","PWD-SCHUNT",
"BUSNA-PWD", "BUSNA-BUSNA", "PWD-PWD"),
labels = c("NMRI", "MMd_F0 (Ws-Ws)", "Mmm-Mmd_Hybrid (WP)", "MMm_F0 (Pw1-Pw1)", "MMd_F0 (Sc-Sc)",
"MMd_F0 (St-St)", "MMd_F1 (Sc-St)", "Mmm-Mmd_F1 (Bu-St)", "Mmm-Mmd_F1 (Pw-Sc)",
"MMm_F1 (Bu-Pw)", "MMm_F0 (Bu-Bu)", "MMm_F0 (Pw-Pw)"))
# add subspecies information based on genotype
DF_all$Mouse_subspecies <- NA
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% "NMRI"] <- "NMRI"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("MMd_F0 (Ws-Ws)", "MMd_F0 (St-St)", "MMd_F0 (Sc-Sc)", "MMd_F1 (Sc-St)")] <- "M.m.dom"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("MMm_F0 (Bu-Bu)", "MMm_F0 (Pw-Pw)", "MMm_F0 (Pw1-Pw1)", "MMm_F1 (Bu-Pw)")] <- "M.m.mus"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("Mmm-Mmd_Hybrid (WP)", "Mmm-Mmd_F1 (Bu-St)", "Mmm-Mmd_F1 (Pw-Sc)")] <- "Hybrid_mus_dom"
df$crossingLevel <- NA
# add crossing level (F0, F1...) information based on genotype
DF_all$crossingLevel <- NA
DF_all$crossingLevel[DF_all$Mouse_genotype %in% "NMRI"] <- "inbredNMRI"
DF_all$crossingLevel[grep("F0", DF_all$Mouse_genotype)] <- "F0"
DF_all$crossingLevel[grep("F1", DF_all$Mouse_genotype)] <- "F1"
# rename properly infection isolates
DF_all$infection_isolate <- factor(
DF_all$infection_isolate,
levels = c("E139", "E64", "E88", "EfLab"),
labels = c("E.ferrisi (E139)", "E.ferrisi (E64)", "E.falciformis (E88)", "E.falciformis (EfLab)"))
# erase useless level
df$infection_isolate <- droplevels(df$infection_isolate)
DF_all$Mouse_subspecies
DF_all$Mouse_subspecies <- factor(DF_all$Mouse_subspecies, levels = c("M.m.dom", "Hybrid_mus_dom", "M.m.mus"))
# add crossing level (F0, F1...) information based on genotype
DF_all$crossingLevel <- NA
DF_all$crossingLevel[DF_all$Mouse_genotype %in% "NMRI"] <- "inbredNMRI"
DF_all$crossingLevel[grep("F0", DF_all$Mouse_genotype)] <- "F0"
DF_all$crossingLevel[grep("F1", DF_all$Mouse_genotype)] <- "F1"
# rename properly infection isolates
DF_all$infection_isolate <- factor(
DF_all$infection_isolate,
levels = c("E139", "E64", "E88", "EfLab"),
labels = c("E.ferrisi (E139)", "E.ferrisi (E64)", "E.falciformis (E88)", "E.falciformis (EfLab)"))
# erase useless level
df$infection_isolate <- droplevels(df$infection_isolate)
DF_all[c("infection_isolate, Mouse_genotype, Mouse_subspecies, crossingLevel")]
DF_all[c("infection_isolate, Mouse_genotype, Mouse_subspecies, crossingLevel"),]
DF_all[,c("infection_isolate, Mouse_genotype, Mouse_subspecies, crossingLevel")]
## Order the levels to be more clear in later plots (parents will be low and down
## on the legend, hybrids in between...)
DF_all$Mouse_genotype <- factor(
DF_all$Mouse_genotype,
levels = c("NMRI", "WSB", "WP", "PWD1", "SCHUNT-SCHUNT",
"STRA-STRA", "SCHUNT-STRA", "BUSNA-STRA","PWD-SCHUNT",
"BUSNA-PWD", "BUSNA-BUSNA", "PWD-PWD"),
labels = c("NMRI", "MMd_F0 (Ws-Ws)", "Mmm-Mmd_Hybrid (WP)", "MMm_F0 (Pw1-Pw1)", "MMd_F0 (Sc-Sc)",
"MMd_F0 (St-St)", "MMd_F1 (Sc-St)", "Mmm-Mmd_F1 (Bu-St)", "Mmm-Mmd_F1 (Pw-Sc)",
"MMm_F1 (Bu-Pw)", "MMm_F0 (Bu-Bu)", "MMm_F0 (Pw-Pw)"))
# add subspecies information based on genotype
DF_all$Mouse_subspecies <- NA
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% "NMRI"] <- "NMRI"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("MMd_F0 (Ws-Ws)", "MMd_F0 (St-St)", "MMd_F0 (Sc-Sc)", "MMd_F1 (Sc-St)")] <- "M.m.dom"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("MMm_F0 (Bu-Bu)", "MMm_F0 (Pw-Pw)", "MMm_F0 (Pw1-Pw1)", "MMm_F1 (Bu-Pw)")] <- "M.m.mus"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("Mmm-Mmd_Hybrid (WP)", "Mmm-Mmd_F1 (Bu-St)", "Mmm-Mmd_F1 (Pw-Sc)")] <- "Hybrid_mus_dom"
DF_all$Mouse_subspecies <- factor(DF_all$Mouse_subspecies, levels = c("M.m.dom", "Hybrid_mus_dom", "M.m.mus"))
# add crossing level (F0, F1...) information based on genotype
DF_all$crossingLevel <- NA
DF_all$crossingLevel[DF_all$Mouse_genotype %in% "NMRI"] <- "inbredNMRI"
DF_all$crossingLevel[grep("F0", DF_all$Mouse_genotype)] <- "F0"
DF_all$crossingLevel[grep("F1", DF_all$Mouse_genotype)] <- "F1"
# rename properly infection isolates
DF_all$infection_isolate <- factor(
DF_all$infection_isolate,
levels = c("E139", "E64", "E88", "EfLab"),
labels = c("E.ferrisi (E139)", "E.ferrisi (E64)", "E.falciformis (E88)", "E.falciformis (EfLab)"))
DF_all[c("infection_isolate, Mouse_genotype, Mouse_subspecies, crossingLevel")]
DF_all$infection_isolate
DF_all[c("infection_isolate", "Mouse_genotype", "Mouse_subspecies", "crossingLevel")]
### data preparation
ExpeDF_003_4 <- readRDS(file = "../data/ExpeDF_003_4_Alice.rds")
ExpeDF_005 <- readRDS(file = "../data/ExpeDF_005_Alice.rds")
forMap <- read.csv("../data/geolocalisation.csv")
source("myFunctions.R")
# Define a theme
theme_set(theme_bw())
## Packages
list.of.packages <- c("parasiteLoad", "bbmle", "devtools", "optimx", # for bbmle it needs to be required(?)
"ggplot2", "VennDiagram","fitdistrplus", # evaluate distribution
"epiR", # Sterne's exact method
"ggmap", "gridExtra",# several plots in one panel
"wesanderson", # nice colors
"ggpubr", "tidyr", "stats", "ggrepel",
"lme4", "lmerTest", "reshape",
"ggeffects", "sjmisc", "sjPlot")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(list.of.packages)
## Reinstall the package in case I updated it
devtools::install_github("alicebalard/parasiteLoad")
library(parasiteLoad)
devtools::install_github("vqv/ggbiplot")
library(ggbiplot)
###### data cleaning ######
DF_all<- merge(ExpeDF_003_4, ExpeDF_005, all = T)
# NB. Let's not consider which parent is which, but make A_B mouse = B_A mouse
# we don't have enough individuals to test this effect, and we are not interested in it anyway!
DF_all$Mouse_strain <- as.character(DF_all$Mouse_strain)
x <- strsplit(DF_all$Mouse_strain, "_")
y <- lapply(x, sort)
z <- unlist(lapply(y, FUN = function(x){paste(x, collapse="-")}))
DF_all$Mouse_genotype <- z
rm(x, y, z)
## Order the levels to be more clear in later plots (parents will be low and down
## on the legend, hybrids in between...)
DF_all$Mouse_genotype <- factor(
DF_all$Mouse_genotype,
levels = c("NMRI", "WSB", "WP", "PWD1", "SCHUNT-SCHUNT",
"STRA-STRA", "SCHUNT-STRA", "BUSNA-STRA","PWD-SCHUNT",
"BUSNA-PWD", "BUSNA-BUSNA", "PWD-PWD"),
labels = c("NMRI", "MMd_F0 (Ws-Ws)", "Mmm-Mmd_Hybrid (WP)", "MMm_F0 (Pw1-Pw1)", "MMd_F0 (Sc-Sc)",
"MMd_F0 (St-St)", "MMd_F1 (Sc-St)", "Mmm-Mmd_F1 (Bu-St)", "Mmm-Mmd_F1 (Pw-Sc)",
"MMm_F1 (Bu-Pw)", "MMm_F0 (Bu-Bu)", "MMm_F0 (Pw-Pw)"))
# add subspecies information based on genotype
DF_all$Mouse_subspecies <- NA
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% "NMRI"] <- "NMRI"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("MMd_F0 (Ws-Ws)", "MMd_F0 (St-St)", "MMd_F0 (Sc-Sc)", "MMd_F1 (Sc-St)")] <- "M.m.dom"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("MMm_F0 (Bu-Bu)", "MMm_F0 (Pw-Pw)", "MMm_F0 (Pw1-Pw1)", "MMm_F1 (Bu-Pw)")] <- "M.m.mus"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("Mmm-Mmd_Hybrid (WP)", "Mmm-Mmd_F1 (Bu-St)", "Mmm-Mmd_F1 (Pw-Sc)")] <- "Hybrid_mus_dom"
DF_all$Mouse_subspecies <- factor(DF_all$Mouse_subspecies, levels = c("M.m.dom", "Hybrid_mus_dom", "M.m.mus"))
# add crossing level (F0, F1...) information based on genotype
DF_all$crossingLevel <- NA
DF_all$crossingLevel[DF_all$Mouse_genotype %in% "NMRI"] <- "inbredNMRI"
DF_all$crossingLevel[grep("F0", DF_all$Mouse_genotype)] <- "F0"
DF_all$crossingLevel[grep("F1", DF_all$Mouse_genotype)] <- "F1"
# rename properly infection isolates
DF_all$infection_isolate <- factor(
DF_all$infection_isolate,
levels = c("E139", "E64", "E88", "EfLab"),
labels = c("E.ferrisi (E139)", "E.ferrisi (E64)", "E.falciformis (E88)", "E.falciformis (EfLab)"))
# drop unused levels
DF_all[c("infection_isolate", "Mouse_genotype", "Mouse_subspecies", "crossingLevel")]
df$infection_isolate
DF_all$infection_isolate #<- droplevels(df$infection_isolate)
DF_all[1]
is.factor(DF_all[1])
is.factor(DF_all[2])
View(DF_all)
is.factor(DF_all[13])
droplevels(DF_all[13])
is.factor(droplevels(DF_all[13]))
is.factor(DF_all[13])
DF_all[c("infection_isolate", "Mouse_genotype", "Mouse_subspecies", "crossingLevel")]
is.factor(DF_all[13])
is.factor(droplevels(DF_all[13]))
### data preparation
ExpeDF_003_4 <- readRDS(file = "../data/ExpeDF_003_4_Alice.rds")
ExpeDF_005 <- readRDS(file = "../data/ExpeDF_005_Alice.rds")
forMap <- read.csv("../data/geolocalisation.csv")
source("myFunctions.R")
# Define a theme
theme_set(theme_bw())
## Packages
list.of.packages <- c("parasiteLoad", "bbmle", "devtools", "optimx", # for bbmle it needs to be required(?)
"ggplot2", "VennDiagram","fitdistrplus", # evaluate distribution
"epiR", # Sterne's exact method
"ggmap", "gridExtra",# several plots in one panel
"wesanderson", # nice colors
"ggpubr", "tidyr", "stats", "ggrepel",
"lme4", "lmerTest", "reshape",
"ggeffects", "sjmisc", "sjPlot")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(list.of.packages)
## Reinstall the package in case I updated it
devtools::install_github("alicebalard/parasiteLoad")
library(parasiteLoad)
devtools::install_github("vqv/ggbiplot")
library(ggbiplot)
###### data cleaning ######
DF_all<- merge(ExpeDF_003_4, ExpeDF_005, all = T)
# NB. Let's not consider which parent is which, but make A_B mouse = B_A mouse
# we don't have enough individuals to test this effect, and we are not interested in it anyway!
DF_all$Mouse_strain <- as.character(DF_all$Mouse_strain)
x <- strsplit(DF_all$Mouse_strain, "_")
y <- lapply(x, sort)
z <- unlist(lapply(y, FUN = function(x){paste(x, collapse="-")}))
DF_all$Mouse_genotype <- z
rm(x, y, z)
## Order the levels to be more clear in later plots (parents will be low and down
## on the legend, hybrids in between...)
DF_all$Mouse_genotype <- factor(
DF_all$Mouse_genotype,
levels = c("NMRI", "WSB", "WP", "PWD1", "SCHUNT-SCHUNT",
"STRA-STRA", "SCHUNT-STRA", "BUSNA-STRA","PWD-SCHUNT",
"BUSNA-PWD", "BUSNA-BUSNA", "PWD-PWD"),
labels = c("NMRI", "MMd_F0 (Ws-Ws)", "Mmm-Mmd_Hybrid (WP)", "MMm_F0 (Pw1-Pw1)", "MMd_F0 (Sc-Sc)",
"MMd_F0 (St-St)", "MMd_F1 (Sc-St)", "Mmm-Mmd_F1 (Bu-St)", "Mmm-Mmd_F1 (Pw-Sc)",
"MMm_F1 (Bu-Pw)", "MMm_F0 (Bu-Bu)", "MMm_F0 (Pw-Pw)"))
# add subspecies information based on genotype
DF_all$Mouse_subspecies <- NA
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% "NMRI"] <- "NMRI"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("MMd_F0 (Ws-Ws)", "MMd_F0 (St-St)", "MMd_F0 (Sc-Sc)", "MMd_F1 (Sc-St)")] <- "M.m.dom"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("MMm_F0 (Bu-Bu)", "MMm_F0 (Pw-Pw)", "MMm_F0 (Pw1-Pw1)", "MMm_F1 (Bu-Pw)")] <- "M.m.mus"
DF_all$Mouse_subspecies[DF_all$Mouse_genotype %in% c("Mmm-Mmd_Hybrid (WP)", "Mmm-Mmd_F1 (Bu-St)", "Mmm-Mmd_F1 (Pw-Sc)")] <- "Hybrid_mus_dom"
DF_all$Mouse_subspecies <- factor(DF_all$Mouse_subspecies, levels = c("M.m.dom", "Hybrid_mus_dom", "M.m.mus"))
# add crossing level (F0, F1...) information based on genotype
DF_all$crossingLevel <- NA
DF_all$crossingLevel[DF_all$Mouse_genotype %in% "NMRI"] <- "inbredNMRI"
DF_all$crossingLevel[grep("F0", DF_all$Mouse_genotype)] <- "F0"
DF_all$crossingLevel[grep("F1", DF_all$Mouse_genotype)] <- "F1"
# rename properly infection isolates
DF_all$infection_isolate <- factor(
DF_all$infection_isolate,
levels = c("E139", "E64", "E88", "EfLab"),
labels = c("E.ferrisi (E139)", "E.ferrisi (E64)", "E.falciformis (E88)", "E.falciformis (EfLab)"))
# drop unused levels
DF_all[c("infection_isolate",
DF_all[c("infection_isolate", "Mouse_genotype", "Mouse_subspecies", "crossingLevel")]
DF_all[c("infection_isolate", "Mouse_genotype", "Mouse_subspecies", "crossingLevel")]
is.factor(DF_all[13])
is.factor(DF_all[14])
is.factor(DF_all[15])
DF_all$infection_isolate
DF_all[13]
names(DF_all[13])
names(DF_all[13])
DF_all[13]
DF_all$infection_isolate
DF_all[,13]
is.factor(DF_all[,13])
apply(DF_all, 2, droplevels)
apply(DF_all, 2, function(x){if is.factor(x) droplevels)}
print("lala")}
apply(DF_all, 2, function(x){if (is.factor(x)){print("lala")}})
is.factor(DF_all[,13])
mytestfactor <- function(x){if (is.factor(x)){print("lala")}}
mmytestfactor(DF_all[,13])
mytestfactor(DF_all[,13])
is.factor(DF_all[,14])
is.factor(DF_all[,1])
is.factor(DF_all[,2])
is.factor(DF_all[,4])
mytestfactor(DF_all[,4])
apply(DF_all, 1, function(x){if (is.factor(x)){print("lala")}})
lapply(DF_all,function(x){if (is.factor(x)){print("lala")}})
lapply(DF_all,function(x){if (is.factor(x)){droplevels(x)}})
DF_all2 <- lapply(DF_all,function(x){if (is.factor(x)){droplevels(x)}})
View(DF_all2)
unlist(DF_all2)
data.frame(DF_all2)
as_data_frame(DF_all2)
DF_all2 <- sapply(DF_all,function(x){if (is.factor(x)){droplevels(x)}})
DF_all2 <- sapply(DF_all,function(x){if (is.factor(x)){droplevels(x)}})
DF_all2 <- apply(DF_all,function(x){if (is.factor(x)){droplevels(x)}})
DF_all2 <- apply(DF_all,1,function(x){if (is.factor(x)){droplevels(x)}})
DF_all2 <- apply(DF_all,2,function(x){if (is.factor(x)){droplevels(x)}})
DF_all2 <- data_frame(lapply(DF_all,function(x){if (is.factor(x)){droplevels(x)}}))
data_frame(lapply(DF_all,function(x){if (is.factor(x)){droplevels(x)}}))
data_frame(lapply(DF_all, function(x){if (is.factor(x)){droplevels(x)}}))
data.frame(lapply(DF_all, function(x){if (is.factor(x)){droplevels(x)}}))
data.frame(lapply(DF_all, function(x){if (is.factor(x)){droplevels(x)}}))
data.frame(lapply(DF_all, function(x) if (is.factor(x)) droplevels(x)))
lapply(DF_all, function(x) if (is.factor(x)) droplevels(x))
DF_all2 <- lapply(DF_all, function(x) if (is.factor(x)) droplevels(x))
View(DF_all2)
DF_all2 <- lapply(DF_all, function(x) if (is.factor(x)) droplevels(x) else x)
View(DF_all2)
DF_all2 <- lapply(DF_all, function(x) if (is.factor(x)) droplevels(x) else x)
data.frame(DF_all2)
DF_all2 <- data.frame(lapply(DF_all, function(x) if (is.factor(x)) droplevels(x) else x))
DF_all == DF_all2
DF_all == DF_all2
#### Drop unused levels for a full dataframe
dropLevelsAllFactorsDF <- function(df){
data.frame(lapply(df, function(x) if (is.factor(x)) droplevels(x) else x))
}
dropLevelsAllFactorsDF(DF_all)
# drop unused levels
DF_all <- data.frame(lapply(DF_all, function(x) if (is.factor(x)) droplevels(x) else x))
rm(DF_all2)
forMap[c("Mouse_genotype", "HI")
# calculate/add hybrid index
DF_all <- merge(DF_all, forMap[c("Mouse_genotype", "HI")], all.x = T)
# calculate/add hybrid index
DF_all <- merge(DF_all, forMap[c("Mouse_genotype", "HI")], all.x = T)
DF_all$HI
# add hybrid index for inbred strains, based on genotype
DF_all$Mouse_genotype
DF_all$Mouse_genotype
levels(DF_all$Mouse_genotype)
# add hybrid index for inbred strains, based on genotype
grep("MMd", DF_all$Mouse_genotype)
# add hybrid index for inbred strains, based on genotype
DF_all$HI[grep("MMd", DF_all$Mouse_genotype)]
